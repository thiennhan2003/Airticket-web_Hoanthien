import app from "./app";
import { env } from "./helpers/env.helper";
import mongoose from "mongoose";
import backgroundJobsService from "./services/background-jobs.service";

// Theo d√µi tr·∫°ng th√°i server
let serverStarted = false;

/// Start the server
const mongooseDbOptions = {
    autoIndex: true, // T·ª± ƒë·ªông t·∫°o index
    maxPoolSize: 10, // S·ªë l∆∞·ª£ng k·∫øt n·ªëi t·ªëi ƒëa
    serverSelectionTimeoutMS: 5000, // Th·ªùi gian ch·ªù ch·ªçn server (ms)
    socketTimeoutMS: 45000, // Th·ªùi gian ch·ªù socket (ms)
    family: 4, // S·ª≠ d·ª•ng IPv4
};

// H√†m kh·ªüi t·∫°o server
const startServer = async () => {
    try {
        // Ch·ªâ kh·ªüi t·∫°o server n·∫øu ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
        if (serverStarted) {
            console.log("üîÑ Server already running, skipping initialization");
            return;
        }

        console.log("üöÄ Starting server...");

        // K·∫øt n·ªëi MongoDB tr∆∞·ªõc
        await mongoose.connect(env.MongoDB_URI as string, mongooseDbOptions);
        console.log("‚úÖ Connected to MongoDB successfully");

        // Kh·ªüi t·∫°o server
        const server = app.listen(env.port, () => {
            serverStarted = true;
            console.log(`üöÄ Backend running at http://localhost:${env.port}`);

            // Kh·ªüi t·∫°o background jobs sau khi server ƒë√£ ch·∫°y
            try {
                backgroundJobsService.initializeJobs();
                console.log('üéØ Background jobs initialized successfully');
            } catch (error) {
                console.error('‚ùå Failed to initialize background jobs:', error);
            }
        });

        // Graceful shutdown
        process.on('SIGTERM', () => {
            console.log('üîÑ SIGTERM received, shutting down gracefully');
            server.close(() => {
                console.log('üîê Server closed');
                backgroundJobsService.stopAllJobs();
                mongoose.connection.close();
                process.exit(0);
            });
        });

        process.on('SIGINT', () => {
            console.log('üîÑ SIGINT received, shutting down gracefully');
            server.close(() => {
                console.log('üîê Server closed');
                backgroundJobsService.stopAllJobs();
                mongoose.connection.close();
                process.exit(0);
            });
        });

    } catch (error) {
        console.error("‚ùå Failed to start server:", error);
        process.exit(1);
    }
};

// Kh·ªüi t·∫°o server
startServer();
