// background-jobs.service.ts - Service x·ª≠ l√Ω c√°c job ch·∫°y n·ªÅn ƒë·ªãnh k·ª≥
import * as cron from 'node-cron';
import Flight from '../models/flight.model';
import Ticket from '../models/ticket.model';
import notificationService from './notification.service';
import Verification from '../models/verification.model';
import emailService from './email.service';
import seatLayoutService from './seatLayout.service';

interface JobConfig {
  cronExpression: string;
  name: string;
  description: string;
  enabled: boolean;
}

/**
 * C·∫•u h√¨nh c√°c job ƒë·ªãnh k·ª≥
 */
const JOB_CONFIGS: Record<string, JobConfig> = {
  CHECKIN_REMINDER: {
    cronExpression: '0 */6 * * *', // M·ªói 6 gi·ªù
    name: 'Check-in Reminder Job',
    description: 'Ki·ªÉm tra v√† g·ª≠i nh·∫Øc nh·ªü check-in cho c√°c chuy·∫øn bay trong 24 gi·ªù t·ªõi',
    enabled: true
  },
  CHECKIN_REMINDER_2H: {
    cronExpression: '0 * * * *', // M·ªói gi·ªù
    name: 'Check-in Reminder 2H Job',
    description: 'G·ª≠i nh·∫Øc nh·ªü check-in b·ªï sung 2 gi·ªù tr∆∞·ªõc khi kh·ªüi h√†nh',
    enabled: true
  },
  BOARDING_REMINDER_1H: {
    cronExpression: '0 * * * *', // M·ªói gi·ªù
    name: 'Boarding Reminder 1H Job',
    description: 'G·ª≠i nh·∫Øc nh·ªü l√™n m√°y bay 1 gi·ªù tr∆∞·ªõc khi kh·ªüi h√†nh',
    enabled: true
  },
  REALTIME_CHECKIN: {
    cronExpression: '*/15 * * * *', // M·ªói 15 ph√∫t
    name: 'Real-time Check-in Job',
    description: 'Ki·ªÉm tra v√† g·ª≠i th√¥ng b√°o khi ƒë·∫øn ƒë√∫ng gi·ªù check-in',
    enabled: true
  },
  FLIGHT_CHANGE_MONITOR: {
    cronExpression: '0 */12 * * *', // M·ªói 12 gi·ªù
    name: 'Flight Change Monitor Job',
    description: 'Ki·ªÉm tra c√°c chuy·∫øn bay c√≥ thay ƒë·ªïi g·∫ßn ƒë√¢y v√† g·ª≠i th√¥ng b√°o',
    enabled: true
  },
  TICKET_EXPIRY_CHECK: {
    cronExpression: '0 */30 * * * *', // M·ªói 30 ph√∫t
    name: 'Ticket Expiry Check Job',
    description: 'Ki·ªÉm tra v√† h·ªßy c√°c v√© qu√° h·∫°n thanh to√°n ch∆∞a ƒë∆∞·ª£c thanh to√°n',
    enabled: true
  },
};

/**
 * Danh s√°ch c√°c job ƒëang ch·∫°y
 */
const activeJobs: Map<string, cron.ScheduledTask> = new Map();

/**
 * Kh·ªüi t·∫°o t·∫•t c·∫£ background jobs
 */
const initializeJobs = (): void => {
  console.log('üöÄ === KH·ªûI T·∫†O BACKGROUND JOBS ===');

  Object.entries(JOB_CONFIGS).forEach(([jobKey, config]) => {
    if (!config.enabled) {
      console.log(`‚è≠Ô∏è B·ªè qua job: ${config.name} (ƒë√£ t·∫Øt)`);
      return;
    }

    try {
      const job = cron.schedule(config.cronExpression, async () => {
        console.log(`\nüîÑ === TH·ª∞C HI·ªÜN JOB: ${config.name} ===`);
        console.log(`üìÖ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}`);

        await executeJob(jobKey);
      });

      activeJobs.set(jobKey, job);
      console.log(`‚úÖ ƒê√£ kh·ªüi t·∫°o job: ${config.name}`);
      console.log(`‚è∞ Cron: ${config.cronExpression}`);

    } catch (error) {
      console.error(`‚ùå L·ªói kh·ªüi t·∫°o job ${config.name}:`, error);
    }
  });

  // B·∫Øt ƒë·∫ßu ch·∫°y t·∫•t c·∫£ c√°c job
  activeJobs.forEach((job, jobKey) => {
    job.start();
    console.log(`‚ñ∂Ô∏è ƒê√£ b·∫Øt ƒë·∫ßu job: ${JOB_CONFIGS[jobKey].name}`);
  });

  console.log(`\nüéâ ƒê√£ kh·ªüi t·∫°o xong ${activeJobs.size} background jobs`);
};

/**
 * D·ª´ng t·∫•t c·∫£ background jobs
 */
const stopAllJobs = (): void => {
  console.log('üõë === D·ª™NG T·∫§T C·∫¢ BACKGROUND JOBS ===');

  activeJobs.forEach((job, jobKey) => {
    job.stop();
    console.log(`‚èπÔ∏è ƒê√£ d·ª´ng job: ${JOB_CONFIGS[jobKey].name}`);
  });

  activeJobs.clear();
  console.log('‚úÖ ƒê√£ d·ª´ng xong t·∫•t c·∫£ jobs');
};

/**
 * Th·ª±c hi·ªán m·ªôt job c·ª• th·ªÉ
 */
const executeJob = async (jobKey: string): Promise<void> => {
  try {
    switch (jobKey) {
      case 'CHECKIN_REMINDER':
        await executeCheckinReminderJob();
        break;
      case 'CHECKIN_REMINDER_2H':
        await executeCheckinReminder2HJob();
        break;
      case 'BOARDING_REMINDER_1H':
        await executeBoardingReminder1HJob();
        break;
      case 'REALTIME_CHECKIN':
        await executeRealtimeCheckinJob();
        break;
      case 'FLIGHT_CHANGE_MONITOR':
        await executeFlightChangeMonitorJob();
        break;
      case 'TICKET_EXPIRY_CHECK':
        await executeTicketExpiryCheckJob();
        break;
      default:
        console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y job: ${jobKey}`);
    }
  } catch (error) {
    console.error(`‚ùå L·ªói th·ª±c hi·ªán job ${jobKey}:`, error);
  }
};

/**
 * Job: G·ª≠i nh·∫Øc nh·ªü check-in b·ªï sung 2 gi·ªù tr∆∞·ªõc
 */
const executeCheckinReminder2HJob = async (): Promise<void> => {
  try {
    console.log('‚è∞ === KI·ªÇM TRA NH·∫ÆC NH·ªû CHECK-IN 2H ===');

    // T√≠nh th·ªùi gian trong 2 gi·ªù t·ªõi
    const now = new Date();
    const next2Hours = new Date(now.getTime() + 2 * 60 * 60 * 1000);

    // T√¨m c√°c chuy·∫øn bay kh·ªüi h√†nh trong 2 gi·ªù t·ªõi v√† ch∆∞a g·ª≠i nh·∫Øc nh·ªü 2h
    const flights = await Flight.find({
      departureTime: {
        $gte: now,
        $lte: next2Hours
      }
    });

    console.log(`‚úàÔ∏è T√¨m th·∫•y ${flights.length} chuy·∫øn bay c·∫ßn ki·ªÉm tra`);

    let totalReminders = 0;
    let successfulReminders = 0;

    for (const flight of flights) {
      try {
        // Ki·ªÉm tra xem ƒë√£ g·ª≠i nh·∫Øc nh·ªü 2h cho chuy·∫øn bay n√†y ch∆∞a
        const hasSentReminder2H = (flight as any).checkinReminder2HSent;
        if (hasSentReminder2H) {
          console.log(`‚è≠Ô∏è ƒê√£ g·ª≠i nh·∫Øc nh·ªü 2h cho chuy·∫øn bay ${flight.flightCode}, b·ªè qua`);
          continue;
        }

        console.log(`üìß G·ª≠i nh·∫Øc nh·ªü 2h cho chuy·∫øn bay ${flight.flightCode}`);
        const success = await notificationService.sendCheckinReminderNotification(flight.flightCode, 2);

        if (success) {
          // ƒê√°nh d·∫•u ƒë√£ g·ª≠i nh·∫Øc nh·ªü 2h
          await Flight.updateOne(
            { _id: flight._id },
            { $set: { checkinReminder2HSent: true } }
          );
          successfulReminders++;
        }
        totalReminders++;

        // ƒê·ª£i 1 gi√¢y gi·ªØa c√°c l·∫ßn g·ª≠i ƒë·ªÉ tr√°nh b·ªã rate limit
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`‚ùå L·ªói g·ª≠i nh·∫Øc nh·ªü 2h cho chuy·∫øn bay ${flight.flightCode}:`, error);
      }
    }

    console.log(`üìä K·∫øt qu·∫£: ${successfulReminders}/${totalReminders} nh·∫Øc nh·ªü 2h g·ª≠i th√†nh c√¥ng`);

  } catch (error) {
    console.error('‚ùå L·ªói job nh·∫Øc nh·ªü check-in 2h:', error);
  }
};

/**
 * Job: G·ª≠i nh·∫Øc nh·ªü l√™n m√°y bay 1 gi·ªù tr∆∞·ªõc
 */
const executeBoardingReminder1HJob = async (): Promise<void> => {
  try {
    console.log('üö∂ === KI·ªÇM TRA NH·∫ÆC NH·ªû L√äN M√ÅY BAY 1H ===');

    // T√≠nh th·ªùi gian trong 1 gi·ªù t·ªõi
    const now = new Date();
    const next1Hour = new Date(now.getTime() + 1 * 60 * 60 * 1000);

    // T√¨m c√°c chuy·∫øn bay kh·ªüi h√†nh trong 1 gi·ªù t·ªõi v√† ch∆∞a g·ª≠i nh·∫Øc nh·ªü l√™n m√°y bay
    const flights = await Flight.find({
      departureTime: {
        $gte: now,
        $lte: next1Hour
      }
    });

    console.log(`‚úàÔ∏è T√¨m th·∫•y ${flights.length} chuy·∫øn bay c·∫ßn ki·ªÉm tra`);

    let totalReminders = 0;
    let successfulReminders = 0;

    for (const flight of flights) {
      try {
        // Ki·ªÉm tra xem ƒë√£ g·ª≠i nh·∫Øc nh·ªü l√™n m√°y bay cho chuy·∫øn bay n√†y ch∆∞a
        const hasSentBoardingReminder = (flight as any).boardingReminder1HSent;
        if (hasSentBoardingReminder) {
          console.log(`‚è≠Ô∏è ƒê√£ g·ª≠i nh·∫Øc nh·ªü l√™n m√°y bay cho chuy·∫øn bay ${flight.flightCode}, b·ªè qua`);
          continue;
        }

        console.log(`üö∂ G·ª≠i nh·∫Øc nh·ªü l√™n m√°y bay cho chuy·∫øn bay ${flight.flightCode}`);
        const success = await notificationService.sendBoardingReminderNotification(flight.flightCode, 1);

        if (success) {
          // ƒê√°nh d·∫•u ƒë√£ g·ª≠i nh·∫Øc nh·ªü l√™n m√°y bay
          await Flight.updateOne(
            { _id: flight._id },
            { $set: { boardingReminder1HSent: true } }
          );
          successfulReminders++;
        }
        totalReminders++;

        // ƒê·ª£i 1 gi√¢y gi·ªØa c√°c l·∫ßn g·ª≠i ƒë·ªÉ tr√°nh b·ªã rate limit
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`‚ùå L·ªói g·ª≠i nh·∫Øc nh·ªü l√™n m√°y bay cho chuy·∫øn bay ${flight.flightCode}:`, error);
      }
    }

    console.log(`üìä K·∫øt qu·∫£: ${successfulReminders}/${totalReminders} nh·∫Øc nh·ªü l√™n m√°y bay g·ª≠i th√†nh c√¥ng`);

  } catch (error) {
    console.error('‚ùå L·ªói job nh·∫Øc nh·ªü l√™n m√°y bay:', error);
  }
};

/**
 * Job: Ki·ªÉm tra v√† g·ª≠i th√¥ng b√°o real-time khi ƒë·∫øn gi·ªù check-in
 */
const executeRealtimeCheckinJob = async (): Promise<void> => {
  try {
    console.log('üîî === KI·ªÇM TRA CHECK-IN REAL-TIME ===');

    // T√≠nh th·ªùi gian hi·ªán t·∫°i (check-in th∆∞·ªùng m·ªü 24h tr∆∞·ªõc)
    const now = new Date();
    const checkinStartTime = new Date(now.getTime() - 24 * 60 * 60 * 1000);

    // T√¨m c√°c chuy·∫øn bay c√≥ th·ªùi gian kh·ªüi h√†nh t·ª´ b√¢y gi·ªù tr·ªü ƒëi v√† check-in ƒë√£ m·ªü
    const flights = await Flight.find({
      departureTime: {
        $gte: now,
        $lte: new Date(now.getTime() + 30 * 60 * 1000) // Trong 30 ph√∫t t·ªõi
      }
    });

    console.log(`‚úàÔ∏è T√¨m th·∫•y ${flights.length} chuy·∫øn bay c√≥ th·ªÉ check-in`);

    let totalNotifications = 0;
    let successfulNotifications = 0;

    for (const flight of flights) {
      try {
        // Ki·ªÉm tra xem check-in ƒë√£ m·ªü ch∆∞a v√† ƒë√£ g·ª≠i th√¥ng b√°o ch∆∞a
        const hasSentRealTimeNotification = (flight as any).realtimeCheckinSent;
        if (hasSentRealTimeNotification) {
          console.log(`‚è≠Ô∏è ƒê√£ g·ª≠i th√¥ng b√°o real-time cho chuy·∫øn bay ${flight.flightCode}, b·ªè qua`);
          continue;
        }

        console.log(`üîî G·ª≠i th√¥ng b√°o real-time check-in cho chuy·∫øn bay ${flight.flightCode}`);
        const success = await notificationService.sendRealtimeCheckinNotification(flight.flightCode);

        if (success) {
          // ƒê√°nh d·∫•u ƒë√£ g·ª≠i th√¥ng b√°o real-time
          await Flight.updateOne(
            { _id: flight._id },
            { $set: { realtimeCheckinSent: true } }
          );
          successfulNotifications++;
        }
        totalNotifications++;

        // ƒê·ª£i 1 gi√¢y gi·ªØa c√°c l·∫ßn g·ª≠i
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`‚ùå L·ªói g·ª≠i th√¥ng b√°o real-time cho chuy·∫øn bay ${flight.flightCode}:`, error);
      }
    }

    console.log(`üìä K·∫øt qu·∫£: ${successfulNotifications}/${totalNotifications} th√¥ng b√°o real-time g·ª≠i th√†nh c√¥ng`);

  } catch (error) {
    console.error('‚ùå L·ªói job real-time check-in:', error);
  }
};

/**
 * Job: G·ª≠i nh·∫Øc nh·ªü check-in
 */
const executeCheckinReminderJob = async (): Promise<void> => {
  try {
    console.log('‚è∞ === KI·ªÇM TRA NH·∫ÆC NH·ªû CHECK-IN ===');

    // T√≠nh th·ªùi gian trong 24 gi·ªù t·ªõi
    const now = new Date();
    const next24Hours = new Date(now.getTime() + 24 * 60 * 60 * 1000);

    // T√¨m c√°c chuy·∫øn bay kh·ªüi h√†nh trong 24 gi·ªù t·ªõi v√† ch∆∞a g·ª≠i nh·∫Øc nh·ªü
    const flights = await Flight.find({
      departureTime: {
        $gte: now,
        $lte: next24Hours
      }
    });

    console.log(`‚úàÔ∏è T√¨m th·∫•y ${flights.length} chuy·∫øn bay c·∫ßn ki·ªÉm tra`);

    let totalReminders = 0;
    let successfulReminders = 0;

    for (const flight of flights) {
      try {
        // Ki·ªÉm tra xem ƒë√£ g·ª≠i nh·∫Øc nh·ªü cho chuy·∫øn bay n√†y ch∆∞a (c√≥ th·ªÉ l∆∞u trong flight document)
        const hasSentReminder = (flight as any).checkinReminderSent;
        if (hasSentReminder) {
          console.log(`‚è≠Ô∏è ƒê√£ g·ª≠i nh·∫Øc nh·ªü cho chuy·∫øn bay ${flight.flightCode}, b·ªè qua`);
          continue;
        }

        console.log(`üìß G·ª≠i nh·∫Øc nh·ªü cho chuy·∫øn bay ${flight.flightCode}`);
        const success = await notificationService.sendCheckinReminderNotification(flight.flightCode);

        if (success) {
          // ƒê√°nh d·∫•u ƒë√£ g·ª≠i nh·∫Øc nh·ªü (c√≥ th·ªÉ c·∫ßn c·∫≠p nh·∫≠t schema)
          await Flight.updateOne(
            { _id: flight._id },
            { $set: { checkinReminderSent: true } }
          );
          successfulReminders++;
        }
        totalReminders++;

        // ƒê·ª£i 1 gi√¢y gi·ªØa c√°c l·∫ßn g·ª≠i ƒë·ªÉ tr√°nh b·ªã rate limit
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`‚ùå L·ªói g·ª≠i nh·∫Øc nh·ªü cho chuy·∫øn bay ${flight.flightCode}:`, error);
      }
    }

    console.log(`üìä K·∫øt qu·∫£: ${successfulReminders}/${totalReminders} nh·∫Øc nh·ªü g·ª≠i th√†nh c√¥ng`);

  } catch (error) {
    console.error('‚ùå L·ªói job nh·∫Øc nh·ªü check-in:', error);
  }
};

/**
 * Job: Ki·ªÉm tra thay ƒë·ªïi l·ªãch bay
 */
const executeFlightChangeMonitorJob = async (): Promise<void> => {
  try {
    console.log('üîç === KI·ªÇM TRA THAY ƒê·ªîI L·ªäCH BAY ===');

    // T√≠nh th·ªùi gian trong 48 gi·ªù qua (ƒë·ªÉ ph√°t hi·ªán thay ƒë·ªïi g·∫ßn ƒë√¢y)
    const last48Hours = new Date(Date.now() - 48 * 60 * 60 * 1000);

    // T√¨m c√°c chuy·∫øn bay c√≥ thay ƒë·ªïi g·∫ßn ƒë√¢y v√† ch∆∞a g·ª≠i th√¥ng b√°o
    const flights = await Flight.find({
      updatedAt: { $gte: last48Hours }
    });

    console.log(`‚úàÔ∏è T√¨m th·∫•y ${flights.length} chuy·∫øn bay c√≥ thay ƒë·ªïi`);

    let totalNotifications = 0;
    let successfulNotifications = 0;

    for (const flight of flights) {
      try {
        // Ki·ªÉm tra xem ƒë√£ g·ª≠i th√¥ng b√°o thay ƒë·ªïi cho chuy·∫øn bay n√†y ch∆∞a
        const hasSentNotification = (flight as any).changeNotificationSent;
        if (hasSentNotification) {
          console.log(`‚è≠Ô∏è ƒê√£ g·ª≠i th√¥ng b√°o cho chuy·∫øn bay ${flight.flightCode}, b·ªè qua`);
          continue;
        }

        // Ki·ªÉm tra xem c√≥ s·ª± kh√°c bi·ªát v·ªÅ th·ªùi gian kh√¥ng (ch·ªâ ki·ªÉm tra n·∫øu ch∆∞a g·ª≠i th√¥ng b√°o)
        if (!(flight as any).originalDepartureTime && !(flight as any).originalArrivalTime) {
          console.log(`‚è≠Ô∏è Chuy·∫øn bay ${flight.flightCode} ch∆∞a c√≥ thay ƒë·ªïi, b·ªè qua`);
          continue;
        }

        console.log(`üö® Ph√°t hi·ªán thay ƒë·ªïi l·ªãch bay: ${flight.flightCode}`);

        const changeData = {
          flightCode: flight.flightCode,
          route: flight.route,
          oldDepartureTime: (flight as any).originalDepartureTime || flight.departureTime,
          newDepartureTime: flight.departureTime,
          oldArrivalTime: (flight as any).originalArrivalTime || flight.arrivalTime,
          newArrivalTime: flight.arrivalTime
        };

        const success = await notificationService.sendFlightChangeNotification(changeData);

        if (success) {
          // ƒê√°nh d·∫•u ƒë√£ g·ª≠i th√¥ng b√°o
          await Flight.updateOne(
            { _id: flight._id },
            { $set: { changeNotificationSent: true } }
          );
          successfulNotifications++;
        }
        totalNotifications++;

        // ƒê·ª£i 1 gi√¢y gi·ªØa c√°c l·∫ßn g·ª≠i
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`‚ùå L·ªói x·ª≠ l√Ω chuy·∫øn bay ${flight.flightCode}:`, error);
      }
    }

    console.log(`üìä K·∫øt qu·∫£: ${successfulNotifications}/${totalNotifications} th√¥ng b√°o g·ª≠i th√†nh c√¥ng`);

  } catch (error) {
    console.error('‚ùå L·ªói job ki·ªÉm tra thay ƒë·ªïi l·ªãch bay:', error);
  }
};

const executeTicketExpiryCheckJob = async (): Promise<void> => {
  try {
    console.log('‚è∞ === KI·ªÇM TRA V√â H·∫æT H·∫†N THANH TO√ÅN ===');
    console.log('üîç ƒêang t√¨m c√°c v√© c√≥ tr·∫°ng th√°i pending v√† ƒë√£ qu√° h·∫°n thanh to√°n...');

    const now = new Date();

    // T√¨m c√°c v√© c√≥ tr·∫°ng th√°i pending v√† ƒë√£ qu√° h·∫°n thanh to√°n
    const expiredTickets = await Ticket.find({
      paymentStatus: 'pending',
      paymentDeadline: { $lt: now }
    }).populate('flightId');

    console.log(`üé´ T√¨m th·∫•y ${expiredTickets.length} v√© h·∫øt h·∫°n thanh to√°n`);
    console.log(`üìÖ Th·ªùi gian hi·ªán t·∫°i: ${now.toLocaleString('vi-VN')}`);

    if (expiredTickets.length === 0) {
      console.log('‚úÖ Kh√¥ng c√≥ v√© n√†o h·∫øt h·∫°n thanh to√°n');
      return;
    }

    let cancelledCount = 0;
    let errorCount = 0;
    let emailSuccessCount = 0;
    let emailErrorCount = 0;

    for (const ticket of expiredTickets) {
      try {
        console.log(`\nüö´ === X·ª¨ L√ù V√â H·∫æT H·∫†N: ${ticket.ticketCode} ===`);
        console.log(`üë§ H√†nh kh√°ch: ${ticket.passengerName}`);
        console.log(`üìß Email: ${ticket.email}`);
        console.log(`‚è∞ H·∫°n thanh to√°n: ${ticket.paymentDeadline.toLocaleString('vi-VN')}`);
        console.log(`üîÑ Th·ªùi gian qu√° h·∫°n: ${Math.floor((now.getTime() - ticket.paymentDeadline.getTime()) / (1000 * 60))} ph√∫t`);

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√© th√†nh cancelled
        await Ticket.updateOne(
          { _id: ticket._id },
          {
            $set: {
              status: 'cancelled',
              paymentStatus: 'failed',
              cancelledAt: now,
              cancelReason: 'Qu√° h·∫°n thanh to√°n (1 gi·ªù)'
            }
          }
        );
        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i v√© th√†nh cancelled`);

        // Ho√†n tr·∫£ gh·∫ø cho chuy·∫øn bay
        if (ticket.flightId && typeof ticket.flightId === 'object' && 'flightCode' in ticket.flightId) {
          const flight = ticket.flightId as any;
          console.log(`‚úàÔ∏è Ho√†n tr·∫£ gh·∫ø cho chuy·∫øn bay: ${flight.flightCode}`);

          await Flight.updateOne(
            { _id: flight._id },
            { $inc: { availableSeats: ticket.passengerCount || 1 } }
          );
          console.log(`‚úÖ ƒê√£ ho√†n tr·∫£ ${ticket.passengerCount || 1} gh·∫ø cho chuy·∫øn bay ${flight.flightCode}`);

          // Gi·∫£i ph√≥ng gh·∫ø c·ª• th·ªÉ ƒë√£ ƒë·∫∑t
          if (ticket.seatNumbers && ticket.seatNumbers.length > 0) {
            try {
              await seatLayoutService.releaseSeats(flight._id.toString(), ticket.seatNumbers);
              console.log(`‚úÖ ƒê√£ gi·∫£i ph√≥ng gh·∫ø ${ticket.seatNumbers.join(', ')} cho chuy·∫øn bay ${flight.flightCode}`);
            } catch (error) {
              console.error(`‚ùå L·ªói gi·∫£i ph√≥ng gh·∫ø ${ticket.seatNumbers.join(', ')}:`, error);
            }
          }
        }

        // G·ª≠i email th√¥ng b√°o h·ªßy v√©
        try {
          console.log(`üìß ƒêang g·ª≠i email th√¥ng b√°o h·ªßy v√© cho ${ticket.email}...`);

          const emailContent = `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
              <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                <div style="text-align: center; margin-bottom: 30px;">
                  <h1 style="color: #dc3545; margin: 0;">‚è∞ Th√¥ng b√°o h·ªßy v√© m√°y bay</h1>
                  <p style="color: #6c757d; margin: 10px 0 0 0;">V√© m√°y bay c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy do qu√° h·∫°n thanh to√°n</p>
                </div>

                <div style="background-color: #f8d7da; padding: 20px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #dc3545;">
                  <h2 style="color: #721c24; margin-top: 0;">K√≠nh g·ª≠i ${ticket.passengerName}!</h2>
                  <p style="color: #721c24; margin-bottom: 0;">
                    Ch√∫ng t√¥i r·∫•t ti·∫øc ph·∫£i th√¥ng b√°o r·∫±ng v√© m√°y bay c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy t·ª± ƒë·ªông do qu√° h·∫°n thanh to√°n.
                  </p>
                </div>

                <div style="background-color: #fff3cd; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                  <h3 style="color: #856404; margin-top: 0;">üìã Th√¥ng tin v√© ƒë√£ h·ªßy</h3>
                  <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                    <div>
                      <p style="margin: 5px 0; color: #856404;"><strong>M√£ v√©:</strong> ${ticket.ticketCode}</p>
                      <p style="margin: 5px 0; color: #856404;"><strong>H·ªç t√™n:</strong> ${ticket.passengerName}</p>
                      <p style="margin: 5px 0; color: #856404;"><strong>Email:</strong> ${ticket.email}</p>
                    </div>
                    <div>
                      <p style="margin: 5px 0; color: #856404;"><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ${ticket.phoneNumber}</p>
                      <p style="margin: 5px 0; color: #856404;"><strong>L√Ω do h·ªßy:</strong> Qu√° h·∫°n thanh to√°n (1 gi·ªù)</p>
                      <p style="margin: 5px 0; color: #856404;"><strong>Ng√†y h·ªßy:</strong> ${new Date().toLocaleString('vi-VN')}</p>
                    </div>
                  </div>
                </div>

                ${ticket.flightId && typeof ticket.flightId === 'object' && 'flightCode' in ticket.flightId ? `
                <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                  <h3 style="color: #2c3e50; margin-top: 0;">‚úàÔ∏è Th√¥ng tin chuy·∫øn bay (ƒê√£ h·ªßy)</h3>
                  <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                    <div>
                      <p style="margin: 5px 0; color: #495057;"><strong>Chuy·∫øn bay:</strong> ${(ticket.flightId as any).flightCode || 'N/A'}</p>
                      <p style="margin: 5px 0; color: #495057;"><strong>Tuy·∫øn bay:</strong> ${(ticket.flightId as any).route || 'N/A'}</p>
                    </div>
                    <div>
                      <p style="margin: 5px 0; color: #495057;"><strong>Kh·ªüi h√†nh:</strong> ${(ticket.flightId as any).departureTime ? new Date((ticket.flightId as any).departureTime).toLocaleString('vi-VN') : 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
                      <p style="margin: 5px 0; color: #495057;"><strong>ƒê·∫øn n∆°i:</strong> ${(ticket.flightId as any).arrivalTime ? new Date((ticket.flightId as any).arrivalTime).toLocaleString('vi-VN') : 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
                    </div>
                  </div>
                  ${ticket.seatNumbers ? `<p style="margin: 5px 0; color: #495057;"><strong>Gh·∫ø (ƒê√£ tr·∫£):</strong> ${ticket.seatNumbers.join(', ')}</p>` : ''}
                </div>
                ` : ''}

                <div style="background-color: #d1ecf1; padding: 15px; border-radius: 6px; border-left: 4px solid #17a2b8; margin-bottom: 20px;">
                  <h4 style="color: #0c5460; margin-top: 0;">üí° Th√¥ng tin quan tr·ªçng</h4>
                  <p style="color: #0c5460; margin: 5px 0;"><strong>‚úÖ Gh·∫ø ƒë√£ ƒë∆∞·ª£c ho√†n tr·∫£:</strong> T·∫•t c·∫£ gh·∫ø ng·ªìi ƒë√£ ƒë∆∞·ª£c tr·∫£ v·ªÅ h·ªá th·ªëng v√† c√≥ s·∫µn cho ƒë·∫∑t v√© m·ªõi</p>
                  <p style="color: #0c5460; margin: 5px 0;"><strong>üîÑ ƒê·∫∑t v√© m·ªõi:</strong> B·∫°n c√≥ th·ªÉ ƒë·∫∑t v√© m·ªõi b·∫•t c·ª© l√∫c n√†o v·ªõi th√¥ng tin chuy·∫øn bay t∆∞∆°ng t·ª±</p>
                  <p style="color: #0c5460; margin: 5px 0;"><strong>üìû H·ªó tr·ª£:</strong> N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá b·ªô ph·∫≠n chƒÉm s√≥c kh√°ch h√†ng</p>
                </div>

                <div style="text-align: center; margin: 30px 0;">
                  <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/flights" style="background: linear-gradient(135deg, #17a2b8 0%, #138496 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: 600; font-size: 16px; display: inline-block; box-shadow: 0 4px 15px rgba(23, 162, 184, 0.3); transition: all 0.2s ease;">
                    üîç T√¨m chuy·∫øn bay m·ªõi
                  </a>
                </div>

                <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e9ecef;">
                  <p style="color: #6c757d; font-size: 14px; margin: 0;">
                    Ch√∫ng t√¥i r·∫•t ti·∫øc v·ªÅ s·ª± b·∫•t ti·ªán n√†y v√† hy v·ªçng ƒë∆∞·ª£c ph·ª•c v·ª• b·∫°n trong t∆∞∆°ng lai!
                  </p>
                  <p style="color: #6c757d; font-size: 14px; margin: 10px 0 0 0;">
                    ¬© 2025 Flight Booking. All rights reserved.
                  </p>
                </div>
              </div>
            </div>
          `;

          const emailSent = await emailService.sendEmail(
            ticket.email,
            `‚è∞ Th√¥ng b√°o h·ªßy v√© m√°y bay - ${ticket.ticketCode}`,
            emailContent
          );

          if (emailSent) {
            console.log(`‚úÖ ƒê√£ g·ª≠i email th√¥ng b√°o h·ªßy v√© th√†nh c√¥ng cho ${ticket.email}`);
            emailSuccessCount++;
          } else {
            console.log(`‚ùå G·ª≠i email th√¥ng b√°o h·ªßy v√© th·∫•t b·∫°i cho ${ticket.email}`);
            emailErrorCount++;
          }
        } catch (emailError) {
          console.error(`‚ùå L·ªói g·ª≠i email th√¥ng b√°o h·ªßy v√© cho ${ticket.email}:`, emailError);
          emailErrorCount++;
        }

        cancelledCount++;

        // ƒê·ª£i 1 gi√¢y gi·ªØa c√°c l·∫ßn x·ª≠ l√Ω ƒë·ªÉ tr√°nh qu√° t·∫£i
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`‚ùå L·ªói x·ª≠ l√Ω v√© h·∫øt h·∫°n ${ticket.ticketCode}:`, error);
        errorCount++;
      }
    }

    console.log(`\nüìä === K·∫æT QU·∫¢ X·ª¨ L√ù V√â H·∫æT H·∫†N ===`);
    console.log(`‚úÖ T·ªïng v√© ƒë√£ h·ªßy: ${cancelledCount}`);
    console.log(`‚ùå T·ªïng l·ªói x·ª≠ l√Ω: ${errorCount}`);
    console.log(`üìß Email g·ª≠i th√†nh c√¥ng: ${emailSuccessCount}`);
    console.log(`üìß Email g·ª≠i th·∫•t b·∫°i: ${emailErrorCount}`);

  } catch (error) {
    console.error('‚ùå L·ªói job ki·ªÉm tra v√© h·∫øt h·∫°n:', error);
  }
};

/**
 * Job: D·ªçn d·∫πp d·ªØ li·ªáu c≈©
 */
const executeEmailCleanupJob = async (): Promise<void> => {
  try {
    console.log('üßπ === D·ªåN D·∫∏P D·ªÆ LI·ªÜU C≈® ===');

    // X√≥a c√°c verification codes c≈© (h∆°n 7 ng√†y)
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);

    // X√≥a c√°c v√© ƒë√£ h·ªßy v√† qu√° c≈© (h∆°n 30 ng√†y)
    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);

    console.log('üìä Th·ª±c hi·ªán c√°c t√°c v·ª• d·ªçn d·∫πp...');

    // Th·ªëng k√™ tr∆∞·ªõc khi x√≥a
    const oldVerifications = await Verification.countDocuments({
      createdAt: { $lt: sevenDaysAgo }
    });

    const oldTickets = await Ticket.countDocuments({
      status: 'cancelled',
      updatedAt: { $lt: thirtyDaysAgo }
    });

    console.log(`üóëÔ∏è S·∫Ω x√≥a: ${oldVerifications} verification codes c≈©, ${oldTickets} v√© ƒë√£ h·ªßy c≈©`);

    // Th·ª±c hi·ªán x√≥a (ch·ªâ log, kh√¥ng th·ª±c s·ª± x√≥a trong m√¥i tr∆∞·ªùng production)
    console.log('‚úÖ ƒê√£ ho√†n th√†nh t√°c v·ª• d·ªçn d·∫πp');

  } catch (error) {
    console.error('‚ùå L·ªói job d·ªçn d·∫πp d·ªØ li·ªáu:', error);
  }
};

/**
 * L·∫•y th√¥ng tin v·ªÅ c√°c job ƒëang ch·∫°y
 */
const getJobStatus = (): Record<string, any> => {
  const status: Record<string, any> = {};

  activeJobs.forEach((job, jobKey) => {
    const config = JOB_CONFIGS[jobKey];
    status[jobKey] = {
      name: config.name,
      description: config.description,
      enabled: config.enabled,
      running: true, // Cron jobs lu√¥n ch·∫°y khi ƒë∆∞·ª£c kh·ªüi t·∫°o
      cronExpression: config.cronExpression
    };
  });

  return status;
};

/**
 * Th·ª±c hi·ªán m·ªôt job th·ªß c√¥ng (cho m·ª•c ƒë√≠ch test)
 */
const executeJobManually = async (jobKey: string): Promise<void> => {
  console.log(`üîß === TH·ª∞C HI·ªÜN JOB TH·ª¶ C√îNG: ${jobKey} ===`);
  await executeJob(jobKey);
};

/**
 * C·∫≠p nh·∫≠t c·∫•u h√¨nh job
 */
const updateJobConfig = (jobKey: string, updates: Partial<JobConfig>): boolean => {
  if (!JOB_CONFIGS[jobKey]) {
    return false;
  }

  Object.assign(JOB_CONFIGS[jobKey], updates);

  // N·∫øu job ƒëang ch·∫°y v√† b·ªã t·∫Øt, d·ª´ng n√≥
  if (!updates.enabled && activeJobs.has(jobKey)) {
    activeJobs.get(jobKey)?.stop();
    activeJobs.delete(jobKey);
  }

  // N·∫øu job ƒë∆∞·ª£c b·∫≠t v√† ch∆∞a ch·∫°y, kh·ªüi t·∫°o l·∫°i
  if (updates.enabled && !activeJobs.has(jobKey)) {
    initializeJobs();
  }

  return true;
};

export default {
  initializeJobs,
  stopAllJobs,
  executeJob,
  executeCheckinReminderJob,
  executeCheckinReminder2HJob,
  executeBoardingReminder1HJob,
  executeRealtimeCheckinJob,
  executeFlightChangeMonitorJob,
  executeTicketExpiryCheckJob,
  executeEmailCleanupJob,
  getJobStatus,
  executeJobManually,
  updateJobConfig,
  JOB_CONFIGS
};
