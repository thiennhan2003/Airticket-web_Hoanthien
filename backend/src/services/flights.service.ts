import createError from "http-errors";
import Flight from "../models/flight.model";
import ticketRoutes from "../router/v1/ticket.route";
import notificationService from "./notification.service";

/**
 * Service Flight:
 * - Nh·∫≠n ƒë·∫ßu v√†o t·ª´ controller
 * - X·ª≠ l√Ω logic nghi·ªáp v·ª•
 * - Tr·∫£ d·ªØ li·ªáu v·ªÅ cho controller
 */

const getAll = async (query: any) => {
  const { page = 1, limit = 10 } = query;

  // S·∫Øp x·∫øp
  let sortObject: any = {};
  const sortType = query.sort_type || "desc";
  const sortBy = query.sort_by || "createdAt";
  sortObject = { ...sortObject, [sortBy]: sortType === "desc" ? -1 : 1 };

  // ƒêi·ªÅu ki·ªán t√¨m ki·∫øm n√¢ng cao
  let where: any = {};

  if (query.route && query.route.length > 0) {
    const routeQuery = query.route;

    // N·∫øu route ch·ª©a d·∫•u g·∫°ch ngang (VD: "H√† N·ªôi - TP.HCM")
    if (routeQuery.includes('-')) {
      const [from, to] = routeQuery.split('-').map((s: string) => s.trim());
      where = {
        $or: [
          { route: { $regex: from, $options: "i" } },
          { route: { $regex: to, $options: "i" } }
        ]
      };
    }
    // N·∫øu route ch·ª©a d·∫•u pipe (VD: "H√† N·ªôi|TP.HCM") - t√¨m ki·∫øm g·∫ßn ƒë√∫ng
    else if (routeQuery.includes('|')) {
      const parts = routeQuery.split('|').map((s: string) => s.trim());
      where = {
        $and: parts.map((part: string) => ({
          route: { $regex: part, $options: "i" }
        }))
      };
    }
    // T√¨m ki·∫øm th√¥ng th∆∞·ªùng
    else {
      where = { route: { $regex: routeQuery, $options: "i" } };
    }
  }

  const flights = await Flight.find(where)
    .skip((page - 1) * limit)
    .limit(limit)
    .sort({ ...sortObject });

  const count = await Flight.countDocuments(where);

  return {
    flights,
    pagination: {
      totalRecord: count,
      limit,
      page,
    },
  };
};

const getById = async (id: string) => {
  const flight = await Flight.findById(id);
  if (!flight) {
    throw createError(404, "Flight not found");
  }
  return flight;
};

const create = async (payload: any) => {
  // Ki·ªÉm tra tr√πng tuy·∫øn + gi·ªù bay
  const exist = await Flight.findOne({
    route: payload.route,
    departureTime: payload.departureTime,
  });
  if (exist) {
    throw createError(400, "Flight with same route and departure time already exists");
  }

  // Ki·ªÉm tra flightCode ƒë√£ t·ªìn t·∫°i
  const existCode = await Flight.findOne({
    flightCode: payload.flightCode,
  });
  if (existCode) {
    throw createError(400, "Flight code already exists");
  }

  const flight = new Flight({
    flightCode: payload.flightCode,
    route: payload.route,
    departureTime: payload.departureTime,
    arrivalTime: payload.arrivalTime,
    totalSeats: payload.totalSeats,
    availableSeats: payload.availableSeats ?? payload.totalSeats,
    firstClassPrice: payload.firstClassPrice,
    businessPrice: payload.businessPrice,
    economyPrice: payload.economyPrice,
    // L∆∞u th·ªùi gian g·ªëc ƒë·ªÉ ph√°t hi·ªán thay ƒë·ªïi sau n√†y
    originalDepartureTime: payload.departureTime,
    originalArrivalTime: payload.arrivalTime,
  });

  await flight.save();
  return flight;
};

const updateById = async (id: string, payload: any) => {
  const flight = await getById(id);
  if (!flight) throw createError(404, "Flight not found");

  // NgƒÉn t·∫°o tr√πng chuy·∫øn
  const exist = await Flight.findOne({
    route: payload.route,
    departureTime: payload.departureTime,
    _id: { $ne: id },
  });
  if (exist) {
    throw createError(400, "Flight with same route and departure time already exists");
  }

  // L·ªçc field kh√¥ng r·ªóng
  const cleanUpdates = Object.fromEntries(
    Object.entries(payload).filter(
      ([, value]) => value !== "" && value !== null && value !== undefined
    )
  );

  // L∆∞u gi·ªù c≈© ƒë·ªÉ so s√°nh
  const oldDepartureTime = flight.departureTime;
  const oldArrivalTime = flight.arrivalTime;

  // C·∫≠p nh·∫≠t c√°c field m·ªõi
  Object.assign(flight, cleanUpdates);
  await flight.save();

  // Ki·ªÉm tra xem c√≥ thay ƒë·ªïi th·ªùi gian kh√¥ng
  const hasTimeChange = cleanUpdates.departureTime || cleanUpdates.arrivalTime;

  if (hasTimeChange) {
    const isDifferent =
      new Date(oldDepartureTime).getTime() !== new Date(flight.departureTime).getTime() ||
      new Date(oldArrivalTime).getTime() !== new Date(flight.arrivalTime).getTime();

    if (isDifferent) {
      console.log(`üö® Ph√°t hi·ªán thay ƒë·ªïi l·ªãch bay: ${flight.flightCode}`);

      const changeData = {
        flightCode: flight.flightCode,
        route: flight.route,
        oldDepartureTime: oldDepartureTime,
        newDepartureTime: flight.departureTime,
        oldArrivalTime: oldArrivalTime,
        newArrivalTime: flight.arrivalTime,
        delayReason: flight.delayReason, // Th√™m l√Ω do delay
      };

      try {
        const success = await notificationService.sendFlightChangeNotification(changeData);
        if (success) {
          // L∆∞u l·∫°i gi·ªù c≈© l√†m m·ªëc cho l·∫ßn sau
          flight.originalDepartureTime = oldDepartureTime;
          flight.originalArrivalTime = oldArrivalTime;

          // ƒê√°nh d·∫•u ƒë√£ g·ª≠i th√¥ng b√°o
          flight.changeNotificationSent = true;

          // Reset reminder
          flight.checkinReminderSent = false;
          flight.checkinReminder2HSent = false;
          flight.realtimeCheckinSent = false;
          flight.boardingReminder1HSent = false;

          await flight.save();

          console.log(`‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o thay ƒë·ªïi l·ªãch bay cho ${flight.flightCode}`);
          console.log(
            `üïí Gi·ªù c≈©: ${oldDepartureTime.toISOString()} ‚Üí Gi·ªù m·ªõi: ${flight.departureTime.toISOString()}`
          );
        }
      } catch (error) {
        console.error(`‚ùå L·ªói g·ª≠i th√¥ng b√°o thay ƒë·ªïi l·ªãch bay:`, error);
      }
    } else {
      console.log(`‚ÑπÔ∏è Th·ªùi gian bay kh√¥ng thay ƒë·ªïi th·ª±c t·∫ø, kh√¥ng g·ª≠i th√¥ng b√°o.`);
    }
  }

  return flight;
};


const getByFlightCode = async (flightCode: string) => {
  const flight = await Flight.findOne({ flightCode });
  if (!flight) {
    throw createError(404, "Flight not found");
  }
  return flight;
};

const deleteById = async (id: string) => {
  const flight = await getById(id);
  await flight.deleteOne({ _id: flight.id });
  return flight;
};

const resetNotificationStatus = async (id: string) => {
  const flight = await getById(id);

  // Reset c√°c tr·∫°ng th√°i th√¥ng b√°o
  await Flight.updateOne(
    { _id: flight._id },
    {
      $set: {
        changeNotificationSent: false,
        checkinReminderSent: false,
        checkinReminder2HSent: false,
        boardingReminder1HSent: false,
        realtimeCheckinSent: false
      }
    }
  );

  return { message: 'Notification status reset successfully' };
};

export default {
  getAll,
  getById,
  getByFlightCode,
  create,
  updateById,
  deleteById,
  resetNotificationStatus,
};
