// email.service.ts - Service g·ª≠i email v·ªõi m√£ x√°c nh·∫≠n
import nodemailer from 'nodemailer';
import Verification from '../models/verification.model';

/**
 * Email Service:
 * - G·ª≠i m√£ x√°c nh·∫≠n qua email th·∫≠t v·ªõi Gmail
 * - C·∫•u h√¨nh v·ªõi App Password c·ªßa Gmail
 */

// C·∫•u h√¨nh transporter v·ªõi Gmail
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER, // Email Gmail c·ªßa b·∫°n
    pass: process.env.EMAIL_PASS  // App Password, kh√¥ng ph·∫£i m·∫≠t kh·∫©u th·∫≠t
  }
});

/**
 * T·∫°o m√£ x√°c nh·∫≠n ng·∫´u nhi√™n 6 ch·ªØ s·ªë
 */
const generateVerificationCode = (): string => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

/**
 * T·∫°o temp token ƒë·ªÉ b·∫£o m·∫≠t
 */
const generateTempToken = (): string => {
  return `temp_${Date.now()}_${Math.random().toString(36).substring(2)}`;
};

/**
 * G·ª≠i m√£ x√°c nh·∫≠n qua email
 */
const sendVerificationEmail = async (email: string, verificationCode: string, userName: string): Promise<boolean> => {
  try {
    console.log('üöÄ === B·∫ÆT ƒê·∫¶U G·ª¨I EMAIL TH·∫¨T ===');
    console.log('üìß Th√¥ng tin c·∫•u h√¨nh Gmail:', {
      EMAIL_USER: process.env.EMAIL_USER,
      EMAIL_PASS: process.env.EMAIL_PASS ? '***configured***' : 'NOT SET',
      targetEmail: email,
      verificationCode: verificationCode
    });

    // Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      console.error('‚ùå Thi·∫øu c·∫•u h√¨nh Gmail trong .env');
      console.error('üí° C·∫ßn thi·∫øt l·∫≠p EMAIL_USER v√† EMAIL_PASS');
      return false;
    }

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: 'üîê M√£ x√°c nh·∫≠n ƒëƒÉng nh·∫≠p - Flight Booking',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
          <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
            <div style="text-align: center; margin-bottom: 30px;">
              <h1 style="color: #2c3e50; margin: 0;">‚úàÔ∏è Flight Booking</h1>
              <p style="color: #7f8c8d; margin: 10px 0 0 0;">X√°c nh·∫≠n ƒëƒÉng nh·∫≠p t√†i kho·∫£n</p>
            </div>

            <div style="background-color: #e7f3ff; padding: 20px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #007bff;">
              <h2 style="color: #2c3e50; margin-top: 0;">Xin ch√†o ${userName}!</h2>
              <p style="color: #495057; margin-bottom: 0;">
                B·∫°n v·ª´a ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n c·ªßa m√¨nh. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng nh·∫≠p, vui l√≤ng nh·∫≠p m√£ x√°c nh·∫≠n b√™n d∆∞·ªõi:
              </p>
            </div>

            <div style="text-align: center; margin: 30px 0;">
              <div style="display: inline-block; background-color: #007bff; color: white; padding: 20px 40px; border-radius: 8px; font-size: 32px; font-weight: bold; letter-spacing: 8px;">
                ${verificationCode}
              </div>
            </div>

            <div style="background-color: #fff3cd; padding: 15px; border-radius: 6px; border-left: 4px solid #ffc107; margin-bottom: 20px;">
              <p style="color: #856404; margin: 0; font-size: 14px;">
                <strong>L∆∞u √Ω:</strong> M√£ x√°c nh·∫≠n n√†y s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t. Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.
              </p>
            </div>

            <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e9ecef;">
              <p style="color: #6c757d; font-size: 14px; margin: 0;">
                N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán ƒëƒÉng nh·∫≠p n√†y, vui l√≤ng b·ªè qua email n√†y.
              </p>
              <p style="color: #6c757d; font-size: 14px; margin: 10px 0 0 0;">
                ¬© 2025 Flight Booking. All rights reserved.
              </p>
            </div>
          </div>
        </div>
      `,
      // Text version cho client email ƒë∆°n gi·∫£n
      text: `
        Xin ch√†o ${userName}!

        B·∫°n v·ª´a ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n Flight Booking.

        M√£ x√°c nh·∫≠n c·ªßa b·∫°n l√†: ${verificationCode}

        M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t.

        N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán ƒëƒÉng nh·∫≠p n√†y, vui l√≤ng b·ªè qua email n√†y.

        ¬© 2025 Flight Booking. All rights reserved.
      `
    };

    console.log('üì® ƒêang g·ª≠i email qua Gmail th·∫≠t...');
    const result = await transporter.sendMail(mailOptions);
    console.log('‚úÖ EMAIL G·ª¨I TH√ÄNH C√îNG!');
    console.log('üì¨ Message ID:', result.messageId);
    console.log('üéØ Email ƒë√£ g·ª≠i ƒë·∫øn:', email);
    console.log('üîê M√£ x√°c nh·∫≠n:', verificationCode);

    return true;
  } catch (error) {
    console.error('‚ùå L·ªñI G·ª¨I EMAIL:', (error as Error).message);
    console.error('üîç Chi ti·∫øt l·ªói:', error);
    console.error('üí° C√°c nguy√™n nh√¢n c√≥ th·ªÉ:');
    console.error('   - EMAIL_USER ho·∫∑c EMAIL_PASS sai');
    console.error('   - Ch∆∞a b·∫≠t 2FA tr√™n Gmail');
    console.error('   - App Password kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
    console.error('   - Gmail ch·∫∑n k·∫øt n·ªëi t·ª´ ·ª©ng d·ª•ng');
    return false;
  }
};

/**
 * T·∫°o v√† l∆∞u m√£ x√°c nh·∫≠n v√†o database
 */
const createVerification = async (email: string, userName: string, type: string = 'login'): Promise<{ verificationCode: string; tempToken: string }> => {
  // T·∫°o m√£ x√°c nh·∫≠n v√† temp token
  const verificationCode = generateVerificationCode();
  const tempToken = generateTempToken();

  // X√≥a c√°c b·∫£n ghi c≈© c·ªßa email n√†y
  await Verification.deleteMany({ email });

  // T·∫°o b·∫£n ghi m·ªõi
  const verification = new Verification({
    email,
    verificationCode,
    tempToken,
    type,
    expiresAt: new Date(Date.now() + 5 * 60 * 1000) // 5 ph√∫t
  });

  await verification.save();

  // G·ª≠i email (async, kh√¥ng ch·ªù)
  sendVerificationEmail(email, verificationCode, userName).catch(error => {
    console.error('L·ªói g·ª≠i email x√°c nh·∫≠n:', error);
  });

  return { verificationCode, tempToken };
};

/**
 * X√°c minh m√£ x√°c nh·∫≠n
 */
const verifyCode = async (email: string, verificationCode: string, tempToken: string): Promise<boolean> => {
  const verification = await Verification.findOne({
    email,
    tempToken,
    isUsed: false,
    expiresAt: { $gt: new Date() }
  });

  if (!verification) {
    return false;
  }

  // Ki·ªÉm tra m√£ x√°c nh·∫≠n
  if (verification.verificationCode !== verificationCode) {
    // TƒÉng s·ªë l·∫ßn th·ª≠
    verification.attempts += 1;
    await verification.save();

    // N·∫øu th·ª≠ qu√° 3 l·∫ßn, ƒë√°nh d·∫•u l√† ƒë√£ d√πng
    if (verification.attempts >= 3) {
      verification.isUsed = true;
      await verification.save();
    }

    return false;
  }

  // ƒê√°nh d·∫•u ƒë√£ s·ª≠ d·ª•ng
  verification.isUsed = true;
  await verification.save();

  return true;
};

/**
 * G·ª≠i l·∫°i m√£ x√°c nh·∫≠n
 */
const resendVerification = async (email: string, tempToken: string, userName: string): Promise<boolean> => {
  // Ki·ªÉm tra temp token c√≤n h·ª£p l·ªá kh√¥ng
  const existingVerification = await Verification.findOne({
    email,
    tempToken,
    isUsed: false,
    expiresAt: { $gt: new Date() }
  });

  if (!existingVerification) {
    return false;
  }

  // T·∫°o m√£ m·ªõi
  const newCode = generateVerificationCode();

  // C·∫≠p nh·∫≠t m√£ m·ªõi
  existingVerification.verificationCode = newCode;
  existingVerification.expiresAt = new Date(Date.now() + 5 * 60 * 1000);
  existingVerification.attempts = 0;
  await existingVerification.save();

  // G·ª≠i email m·ªõi
  return await sendVerificationEmail(email, newCode, userName);
};

/**
 * G·ª≠i email ch·ª©a m√£ QR check-in
 */
const sendQRCodeEmail = async (email: string, passengerName: string, ticketCode: string, qrCodeData: string, flightInfo: any): Promise<boolean> => {
  try {
    console.log('üöÄ === G·ª¨I EMAIL M√É QR CHECK-IN ===');
    console.log('üìß Th√¥ng tin:', {
      EMAIL_USER: process.env.EMAIL_USER,
      EMAIL_PASS: process.env.EMAIL_PASS ? '***configured***' : 'NOT SET',
      to: email,
      ticketCode
    });

    // Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      console.error('‚ùå Thi·∫øu c·∫•u h√¨nh Gmail trong .env');
      return false;
    }

    // T·∫°o m√£ QR d·∫°ng base64 ƒë·ªÉ nh√∫ng v√†o email
    const qrCodeBase64 = `data:image/png;base64,${qrCodeData}`;

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: '‚úÖ Check-in th√†nh c√¥ng - M√£ QR v√© m√°y bay',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
          <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
            <div style="text-align: center; margin-bottom: 30px;">
              <h1 style="color: #28a745; margin: 0;">‚úÖ Check-in th√†nh c√¥ng!</h1>
              <p style="color: #6c757d; margin: 10px 0 0 0;">V√© m√°y bay c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng</p>
            </div>

            <div style="background-color: #e7f3ff; padding: 20px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #007bff;">
              <h2 style="color: #2c3e50; margin-top: 0;">Xin ch√†o ${passengerName}!</h2>
              <p style="color: #495057; margin-bottom: 0;">
                B·∫°n ƒë√£ check-in th√†nh c√¥ng cho chuy·∫øn bay <strong>${flightInfo.flightCode}</strong>.
                Vui l√≤ng xu·∫•t tr√¨nh m√£ QR b√™n d∆∞·ªõi t·∫°i qu·∫ßy check-in s√¢n bay.
              </p>
            </div>

            <div style="text-align: center; margin: 30px 0; padding: 20px; background-color: #f8f9fa; border-radius: 8px;">
              <h3 style="color: #2c3e50; margin-top: 0;">üì± M√£ QR V√© m√°y bay</h3>
              <div style="display: inline-block; padding: 20px; background-color: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                <img src="cid:qr-code" alt="QR Code" style="width: 200px; height: 200px;" />
              </div>
              <p style="color: #6c757d; margin: 15px 0 0 0; font-size: 14px;">
                <strong>M√£ v√©:</strong> ${ticketCode}
              </p>
            </div>

            <div style="background-color: #d4edda; padding: 15px; border-radius: 6px; border-left: 4px solid #28a745; margin-bottom: 20px;">
              <h4 style="color: #155724; margin-top: 0;">Th√¥ng tin chuy·∫øn bay</h4>
              <p style="color: #155724; margin: 5px 0;"><strong>Tuy·∫øn bay:</strong> ${flightInfo.route}</p>
              <p style="color: #155724; margin: 5px 0;"><strong>Kh·ªüi h√†nh:</strong> ${new Date(flightInfo.departureTime).toLocaleString('vi-VN')}</p>
            </div>

            <div style="background-color: #fff3cd; padding: 15px; border-radius: 6px; border-left: 4px solid #ffc107; margin-bottom: 20px;">
              <p style="color: #856404; margin: 0; font-size: 14px;">
                <strong>L∆∞u √Ω:</strong> Vui l√≤ng ƒë·∫øn s√¢n bay tr∆∞·ªõc 2 ti·∫øng so v·ªõi gi·ªù kh·ªüi h√†nh.
                Xu·∫•t tr√¨nh m√£ QR n√†y c√πng v·ªõi gi·∫•y t·ªù t√πy th√¢n t·∫°i qu·∫ßy check-in.
              </p>
            </div>

            <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e9ecef;">
              <p style="color: #6c757d; font-size: 14px; margin: 0;">
                Ch√∫c b·∫°n c√≥ m·ªôt chuy·∫øn bay an to√†n v√† vui v·∫ª!
              </p>
              <p style="color: #6c757d; font-size: 14px; margin: 10px 0 0 0;">
                ¬© 2025 Flight Booking. All rights reserved.
              </p>
            </div>
          </div>
        </div>
      `,
      attachments: [
        {
          filename: 'qr-code.png',
          content: qrCodeData,
          encoding: 'base64',
          cid: 'qr-code'
        }
      ]
    };

    console.log('üì® ƒêang g·ª≠i email m√£ QR...');
    const result = await transporter.sendMail(mailOptions);
    console.log('‚úÖ EMAIL M√É QR G·ª¨I TH√ÄNH C√îNG!');
    console.log('üì¨ Message ID:', result.messageId);

    return true;
  } catch (error) {
    console.error('‚ùå L·ªñI G·ª¨I EMAIL M√É QR:', (error as Error).message);
    return false;
  }
};

/**
 * G·ª≠i email t√πy ch·ªânh (kh√¥ng ph·∫£i m√£ x√°c nh·∫≠n)
 */
const sendEmail = async (to: string, subject: string, htmlContent: string, textContent?: string): Promise<boolean> => {
  try {
    console.log('üöÄ === G·ª¨I EMAIL T√ôY CH·ªàNH ===');
    console.log('üìß Th√¥ng tin:', {
      EMAIL_USER: process.env.EMAIL_USER,
      EMAIL_PASS: process.env.EMAIL_PASS ? '***configured***' : 'NOT SET',
      to,
      subject
    });

    // Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      console.error('‚ùå Thi·∫øu c·∫•u h√¨nh Gmail trong .env');
      return false;
    }

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to,
      subject,
      html: htmlContent,
      text: textContent || htmlContent.replace(/<[^>]*>/g, '') // Strip HTML for text version
    };

    console.log('üì® ƒêang g·ª≠i email t√πy ch·ªânh...');
    const result = await transporter.sendMail(mailOptions);
    console.log('‚úÖ EMAIL T√ôY CH·ªàNH G·ª¨I TH√ÄNH C√îNG!');
    console.log('üì¨ Message ID:', result.messageId);

    return true;
  } catch (error) {
    console.error('‚ùå L·ªñI G·ª¨I EMAIL T√ôY CH·ªàNH:', (error as Error).message);
    return false;
  }
};

/**
 * Cleanup c√°c b·∫£n ghi h·∫øt h·∫°n
 */
const cleanupExpiredVerifications = async (): Promise<void> => {
  await Verification.deleteMany({
    expiresAt: { $lt: new Date() }
  });
};

export default {
  createVerification,
  verifyCode,
  resendVerification,
  cleanupExpiredVerifications,
  sendVerificationEmail,
  sendEmail,
  sendQRCodeEmail
};
