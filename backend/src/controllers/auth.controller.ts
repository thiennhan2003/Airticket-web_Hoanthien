import { Request, Response, NextFunction } from 'express';
import authService from '../services/auth.service';
import emailService from '../services/email.service';
import { httpStatus } from '../helpers/response.helper';
import { sendJsonSuccess } from '../helpers/response.helper';
import jwt from 'jsonwebtoken';
import { env } from '../helpers/env.helper';
import User from '../models/users.model';

// ƒêƒÉng k√Ω user
const register = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { fullName, email, password, phoneNumber } = req.body;
    const newUser = await authService.register({ fullName, email, password, phoneNumber });
    sendJsonSuccess(res, newUser, httpStatus.CREATED.statusCode, httpStatus.CREATED.message);
  } catch (error) {
    next(error);
  }
};

// ƒêƒÉng nh·∫≠p
const login = async (req: Request, res: Response, next: NextFunction) => {
  try {
    // G·ªçi service login
    const { user, accessToken, refreshToken, expiresIn } = await authService.login(req.body.email, req.body.password);
    
    // G·ª≠i response v·ªõi c·∫•u tr√∫c mong mu·ªën
    res.status(200).json({
      statusCode: 200,
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      data: {
        user,
        token: {
          accessToken,
          refreshToken,
          expiresIn
        }
      }
    });
  } catch (error) {
    next(error);
  }
};

// L·∫•y profile user ƒë√£ ƒëƒÉng nh·∫≠p
const getProfile = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const user = await authService.getProfile(res.locals.user);
    sendJsonSuccess(res, user, httpStatus.OK.statusCode, httpStatus.OK.message);
  } catch (error) {
    next(error);
  }
};

// ƒêƒÉng nh·∫≠p v·ªõi 2FA - B∆∞·ªõc 1: X√°c th·ª±c m·∫≠t kh·∫©u v√† g·ª≠i m√£ x√°c nh·∫≠n
const loginWith2FA = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { email, password } = req.body;

    // Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p
    const user = await authService.validateLogin(email, password);

    if (!user) {
      return res.status(401).json({
        statusCode: 401,
        message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng'
      });
    }

    // T·∫°o m√£ x√°c nh·∫≠n v√† g·ª≠i email
    const { verificationCode, tempToken } = await emailService.createVerification(
      user.email,
      user.fullName,
      'login'
    );

    console.log(`üîê M√£ x√°c nh·∫≠n cho ${user.email}: ${verificationCode}`);

    // Tr·∫£ v·ªÅ th√¥ng tin ƒë·ªÉ chuy·ªÉn sang trang x√°c nh·∫≠n
    res.status(200).json({
      statusCode: 200,
      message: 'Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ nh·∫≠n m√£ x√°c nh·∫≠n',
      data: {
        email: user.email,
        tempToken: tempToken,
        requiresVerification: true
      }
    });
  } catch (error) {
    next(error);
  }
};

// X√°c minh m√£ 2FA - B∆∞·ªõc 2: Nh·∫≠n token th·∫≠t
const verify2FA = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { email, verificationCode, tempToken } = req.body;

    // X√°c minh m√£ x√°c nh·∫≠n
    const isValid = await emailService.verifyCode(email, verificationCode, tempToken);

    if (!isValid) {
      return res.status(400).json({
        statusCode: 400,
        message: 'M√£ x√°c nh·∫≠n kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n'
      });
    }

    // T√¨m user ƒë·ªÉ t·∫°o token th·∫≠t
    const user = await authService.getUserByEmail(email);
    const { accessToken, refreshToken, expiresIn } = authService.generateTokens(user);

    // Tr·∫£ v·ªÅ token th·∫≠t
    res.status(200).json({
      statusCode: 200,
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      data: {
        user,
        token: {
          accessToken,
          refreshToken,
          expiresIn
        }
      }
    });
  } catch (error) {
    next(error);
  }
};

// G·ª≠i l·∫°i m√£ x√°c nh·∫≠n 2FA
const resend2FA = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { email, tempToken } = req.body;

    // T√¨m user ƒë·ªÉ l·∫•y t√™n
    const user = await authService.getUserByEmail(email);

    // G·ª≠i l·∫°i m√£ x√°c nh·∫≠n
    const success = await emailService.resendVerification(email, tempToken, user.fullName);

    if (!success) {
      return res.status(400).json({
        statusCode: 400,
        message: 'Kh√¥ng th·ªÉ g·ª≠i l·∫°i m√£ x√°c nh·∫≠n'
      });
    }

    res.status(200).json({
      statusCode: 200,
      message: 'ƒê√£ g·ª≠i l·∫°i m√£ x√°c nh·∫≠n v·ªÅ email c·ªßa b·∫°n'
    });
  } catch (error) {
    next(error);
  }
};

// Refresh token
const refreshToken = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { refreshToken: tokenToRefresh } = req.body;

    if (!tokenToRefresh) {
      return res.status(400).json({
        statusCode: 400,
        message: 'Refresh token l√† b·∫Øt bu·ªôc'
      });
    }

    // X√°c minh refresh token
    const decoded = jwt.verify(tokenToRefresh, env.JWT_SECRET as string) as any;

    // T√¨m user
    const user = await User.findById(decoded._id);
    if (!user) {
      return res.status(401).json({
        statusCode: 401,
        message: 'Refresh token kh√¥ng h·ª£p l·ªá'
      });
    }

    // T·∫°o token m·ªõi
    const { accessToken, refreshToken: newRefreshToken, expiresIn } = authService.generateTokens(user);

    res.status(200).json({
      statusCode: 200,
      message: 'Refresh token th√†nh c√¥ng',
      data: {
        accessToken,
        refreshToken: newRefreshToken,
        expiresIn
      }
    });
  } catch (error: any) {
    if (error.name === 'JsonWebTokenError' || error.name === 'TokenExpiredError') {
      return res.status(401).json({
        statusCode: 401,
        message: 'Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n'
      });
    }
    console.error('Refresh token error:', error);
    next(error);
  }
};

export default {
  register,
  login,
  loginWith2FA,
  verify2FA,
  resend2FA,
  refreshToken,
  getProfile
  // updateProfile - t·∫°m th·ªùi comment v√¨ ch∆∞a implement
};
