import { Request, Response, NextFunction } from 'express';
import paymentService from '../services/payment.service';
import walletService from '../services/wallet.service';
import { sendJsonSuccess, httpStatus } from '../helpers/response.helper';
import ticketsService from '../services/tickets.service';
import emailService from '../services/email.service';
import Flight from '../models/flight.model';
import WalletTransaction from '../models/walletTransaction.model';

/**
 * Payment Controller
 * Handles payment-related operations including creating payment intents,
 * confirming payments, and processing refunds
 */

// Create payment intent for ticket booking
const createPaymentIntent = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { ticketId, amount, currency = 'usd', paymentMethod = 'stripe', pin } = req.body;

    // Validate ticket exists and belongs to user
    const ticket = await ticketsService.getById(ticketId);
    if (!ticket) {
      return res.status(404).json({
        statusCode: 404,
        message: 'Ticket not found'
      });
    }

    // Check if user owns the ticket
    const user = res.locals.user;

    if (!ticket.userId.equals(user._id)) {
      return res.status(403).json({
        statusCode: 403,
        message: 'You do not have permission to pay for this ticket'
      });
    }

    let paymentResult;

    // Handle wallet payment
    if (paymentMethod === 'wallet') {
      try {
        // Ki·ªÉm tra s·ªë d∆∞ v√≠
        const walletInfo = await walletService.getWalletInfo(user._id.toString());

        if (walletInfo.walletBalance < amount) {
          return res.status(400).json({
            statusCode: 400,
            message: 'Insufficient wallet balance',
            requiredAmount: amount,
            currentBalance: walletInfo.walletBalance
          });
        }

        // Ki·ªÉm tra PIN n·∫øu c·∫ßn
        if (user.walletPin && !pin) {
          return res.status(400).json({
            statusCode: 400,
            message: 'Wallet PIN is required',
            requiresPin: true
          });
        }

        // Th·ª±c hi·ªán thanh to√°n b·∫±ng v√≠
        paymentResult = await walletService.payWithWallet({
          userId: user._id.toString(),
          ticketId: ticketId,
          amount: amount,
          pin: pin
        });

        // C·∫≠p nh·∫≠t ticket status
        await ticketsService.updateById(ticketId, {
          paymentStatus: 'paid',
          paymentMethod: 'wallet',
          paidAt: new Date()
        });

        // L·∫•y th√¥ng tin flight ƒë·ªÉ g·ª≠i email
        const flight = await Flight.findById(ticket.flightId);

        // G·ª≠i email x√°c nh·∫≠n
        if (flight) {
          await sendWalletPaymentConfirmationEmail(user, ticket, flight, paymentResult.newBalance);
        }

        return sendJsonSuccess(res, {
          success: true,
          paymentMethod: 'wallet',
          amount: amount,
          newBalance: paymentResult.newBalance,
          message: 'Payment completed successfully with wallet'
        }, httpStatus.OK.statusCode, 'Payment completed successfully');

      } catch (walletError: any) {
        return res.status(400).json({
          statusCode: 400,
          message: walletError.message,
          paymentMethod: 'wallet'
        });
      }
    }

    // Handle traditional payment methods (Stripe, VNPay, MoMo)
    const paymentIntentData = {
      amount: Math.round(amount),
      currency: currency.toLowerCase(),
      ticketId: ticketId,
      customerEmail: user.email,
      description: `Flight ticket payment - ${ticketId} - ${ticket.passengerName}`
    };

    paymentResult = await paymentService.createPaymentIntent(paymentIntentData);

    // Update ticket with payment intent ID
    await ticketsService.updateById(ticketId, {
      paymentIntentId: paymentResult.paymentIntentId,
      paymentStatus: 'pending',
      paymentMethod: paymentMethod
    });

    sendJsonSuccess(res, paymentResult, httpStatus.CREATED.statusCode, 'Payment intent created successfully');
  } catch (error: any) {
    next(error);
  }
};

// Confirm payment after successful Stripe payment
const confirmPayment = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { paymentIntentId } = req.body;

    // Confirm payment with Stripe
    const paymentResult = await paymentService.confirmPayment(paymentIntentId);

    if (paymentResult.success) {
      // Get ticket by payment intent ID from metadata
      const paymentIntent = await paymentService.getPaymentDetails(paymentIntentId);

      // Update ticket status
      await ticketsService.updateById(paymentIntent.metadata.ticketId, {
        paymentStatus: 'paid',
        paidAt: new Date(),
        paymentMethod: 'stripe'
      });

      // Get updated ticket for email
      const ticket = await ticketsService.getById(paymentIntent.metadata.ticketId);

      // Send confirmation email
      if (ticket) {
        await sendPaymentConfirmationEmail(ticket, paymentIntent);
      }

      // Send success response
      res.status(200).json({
        statusCode: 200,
        message: 'Payment confirmed successfully',
        data: {
          paymentIntentId: paymentIntent.id,
          amount: paymentIntent.amount,
          currency: paymentIntent.currency,
          originalAmount: paymentIntent.metadata?.originalAmount,
          originalCurrency: paymentIntent.metadata?.originalCurrency,
          status: paymentIntent.status,
          ticketId: paymentIntent.metadata.ticketId
        }
      });
    } else {
      res.status(400).json({
        statusCode: 400,
        message: paymentResult.message,
        data: { status: paymentResult.status }
      });
    }
  } catch (error: any) {
    next(error);
  }
};

// Send payment confirmation email
const sendPaymentConfirmationEmail = async (ticket: any, paymentIntent: any) => {
  try {
    const flight = await Flight.findById(ticket.flightId);

    const emailContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
        <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
          <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="color: #28a745; margin: 0;">üí≥ Thanh to√°n th√†nh c√¥ng!</h1>
            <p style="color: #6c757d; margin: 10px 0 0 0;">V√© m√°y bay c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n</p>
          </div>

          <div style="background-color: #e7f3ff; padding: 20px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #007bff;">
            <h2 style="color: #2c3e50; margin-top: 0;">Xin ch√†o ${ticket.passengerName}!</h2>
            <p style="color: #495057; margin-bottom: 0;">
              Ch√∫ng t√¥i r·∫•t vui th√¥ng b√°o r·∫±ng thanh to√°n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!
              V√© m√°y bay c·ªßa b·∫°n hi·ªán ƒë√£ s·∫µn s√†ng ƒë·ªÉ s·ª≠ d·ª•ng.
            </p>
          </div>

          <div style="background-color: #d4edda; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #155724; margin-top: 0;">‚úÖ Th√¥ng tin thanh to√°n</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
              <div>
                <p style="margin: 5px 0; color: #155724;"><strong>M√£ v√©:</strong> ${ticket.ticketCode}</p>
                <p style="margin: 5px 0; color: #155724;"><strong>M√£ thanh to√°n:</strong> ${paymentIntent.id}</p>
                <p style="margin: 5px 0; color: #155724;"><strong>Ng√†y thanh to√°n:</strong> ${new Date().toLocaleString('vi-VN')}</p>
              </div>
              <div>
                <p style="margin: 5px 0; color: #155724;"><strong>S·ªë ti·ªÅn:</strong> ${parseFloat(paymentIntent.metadata?.originalAmount || '0').toLocaleString('vi-VN')} ${paymentIntent.metadata?.originalCurrency?.toUpperCase() || 'VND'}</p>
                <p style="margin: 5px 0; color: #155724;"><strong>Quy ƒë·ªïi:</strong> $${(paymentIntent.amount / 100 / 0.000043).toFixed(2)} USD</p>
                <p style="margin: 5px 0; color: #155724;"><strong>Ph∆∞∆°ng th·ª©c:</strong> ${ticket.paymentMethod || 'Th·∫ª t√≠n d·ª•ng'}</p>
              </div>
            </div>
          </div>

          ${flight ? `
          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #2c3e50; margin-top: 0;">‚úàÔ∏è Th√¥ng tin chuy·∫øn bay</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
              <div>
                <p style="margin: 5px 0; color: #495057;"><strong>Chuy·∫øn bay:</strong> ${flight.flightCode || 'N/A'}</p>
                <p style="margin: 5px 0; color: #495057;"><strong>Tuy·∫øn bay:</strong> ${flight.route || 'N/A'}</p>
              </div>
              <div>
                <p style="margin: 5px 0; color: #495057;"><strong>Kh·ªüi h√†nh:</strong> ${flight.departureTime ? new Date(flight.departureTime).toLocaleString('vi-VN') : 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
                <p style="margin: 5px 0; color: #495057;"><strong>ƒê·∫øn n∆°i:</strong> ${flight.arrivalTime ? new Date(flight.arrivalTime).toLocaleString('vi-VN') : 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
              </div>
            </div>
          </div>
          ` : ''}

          <div style="background-color: #fff3cd; padding: 15px; border-radius: 6px; border-left: 4px solid #ffc107; margin-bottom: 20px;">
            <h4 style="color: #856404; margin-top: 0;">üìã Th√¥ng tin h√†nh kh√°ch</h4>
            <p style="color: #856404; margin: 5px 0;"><strong>H·ªç t√™n:</strong> ${ticket.passengerName}</p>
            <p style="color: #856404; margin: 5px 0;"><strong>Email:</strong> ${ticket.email}</p>
            <p style="color: #856404; margin: 5px 0;"><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ${ticket.phoneNumber}</p>
            ${ticket.seatNumbers ? `<p style="color: #856404; margin: 5px 0;"><strong>Gh·∫ø:</strong> ${ticket.seatNumbers.join(', ')}</p>` : ''}
          </div>

          <div style="background-color: #fff3cd; padding: 15px; border-radius: 6px; border-left: 4px solid #ffc107; margin-bottom: 20px;">
            <p style="color: #856404; margin: 0; font-size: 14px;">
              <strong>üí° L∆∞u √Ω quan tr·ªçng:</strong><br>
              ‚Ä¢ Vui l√≤ng ƒë·∫øn s√¢n bay tr∆∞·ªõc 2 ti·∫øng so v·ªõi gi·ªù kh·ªüi h√†nh<br>
              ‚Ä¢ Mang theo gi·∫•y t·ªù t√πy th√¢n v√† v√© ƒëi·ªán t·ª≠<br>
              ‚Ä¢ Ki·ªÉm tra k·ªπ th√¥ng tin chuy·∫øn bay tr∆∞·ªõc khi ƒëi<br>
              ‚Ä¢ Li√™n h·ªá ch√∫ng t√¥i n·∫øu c√≥ thay ƒë·ªïi
            </p>
          </div>

          <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e9ecef;">
            <p style="color: #6c757d; font-size: 14px; margin: 0;">
              Ch√∫c b·∫°n c√≥ m·ªôt chuy·∫øn bay an to√†n v√† vui v·∫ª!
            </p>
            <p style="color: #6c757d; font-size: 14px; margin: 10px 0 0 0;">
              ¬© 2025 Flight Booking. All rights reserved.
            </p>
          </div>
        </div>
      </div>
    `;

    await emailService.sendEmail(
      ticket.email,
      `‚úÖ Thanh to√°n th√†nh c√¥ng - V√© m√°y bay ${ticket.ticketCode}`,
      emailContent
    );

    console.log(`‚úÖ ƒê√£ g·ª≠i email x√°c nh·∫≠n thanh to√°n ƒë·∫πp cho ${ticket.email}`);
  } catch (error) {
    console.error('L·ªói g·ª≠i email x√°c nh·∫≠n thanh to√°n ƒë·∫πp:', error);
    // Kh√¥ng throw error ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n thanh to√°n
  }
};

// Process refund for cancelled ticket
const processRefund = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { ticketId, reason = 'Customer requested cancellation' } = req.body;
    console.log('üîÑ Starting refund process for ticket:', ticketId);

    // Validate ticket exists and belongs to user
    const ticket = await ticketsService.getById(ticketId);
    if (!ticket) {
      console.error('‚ùå Ticket not found:', ticketId);
      return res.status(404).json({
        statusCode: 404,
        message: 'Ticket not found'
      });
    }
    console.log('‚úÖ Ticket found:', ticket.ticketCode, 'Payment Status:', ticket.paymentStatus, 'Payment Method:', ticket.paymentMethod);

    // Check if user owns the ticket
    const user = res.locals.user;
    if (!ticket.userId.equals(user._id)) {
      console.error('‚ùå User does not own ticket:', { userId: user._id, ticketUserId: ticket.userId });
      return res.status(403).json({
        statusCode: 403,
        message: 'You do not have permission to refund this ticket'
      });
    }

    // Check if ticket is paid and refundable
    if (ticket.paymentStatus !== 'paid') {
      console.error('‚ùå Ticket not paid:', ticket.paymentStatus);
      return res.status(400).json({
        statusCode: 400,
        message: 'Only paid tickets can be refunded'
      });
    }

    let refundResult;

    // Handle wallet payment refund
    if (ticket.paymentMethod === 'wallet') {
      console.log('üí∞ Processing wallet refund...');

      // T·∫°o wallet transaction cho vi·ªác ho√†n ti·ªÅn
      const walletTransaction = new WalletTransaction({
        userId: user._id,
        type: 'refund',
        amount: ticket.price,
        balanceAfter: 0, // S·∫Ω c·∫≠p nh·∫≠t sau khi c·ªông ti·ªÅn v√†o v√≠
        description: `Ho√†n ti·ªÅn v√© m√°y bay ${ticket.ticketCode} - ${reason}`,
        paymentMethod: 'wallet',
        referenceId: ticketId,
        status: 'completed'
      });

      await walletTransaction.save();

      // C·ªông ti·ªÅn v√†o v√≠ ng∆∞·ªùi d√πng
      user.updateWalletBalance(ticket.price, 'add');
      await user.save();

      // C·∫≠p nh·∫≠t balance trong transaction
      walletTransaction.balanceAfter = user.walletBalance;
      await walletTransaction.save();

      refundResult = {
        success: true,
        refundId: walletTransaction._id,
        amount: ticket.price,
        currency: 'vnd',
        status: 'completed',
        metadata: {
          originalAmount: ticket.price,
          originalCurrency: 'vnd'
        }
      };

      console.log('‚úÖ Wallet refund processed successfully:', refundResult.refundId);
    } else {
      // Handle traditional payment methods (Stripe)
      if (!ticket.paymentIntentId) {
        console.error('‚ùå No payment intent ID found for ticket:', ticketId);
        return res.status(400).json({
          statusCode: 400,
          message: 'No payment information found for this ticket'
        });
      }
      console.log('‚úÖ Payment intent ID found:', ticket.paymentIntentId);

      // Process refund with Stripe
      const refundData = {
        paymentIntentId: ticket.paymentIntentId,
        reason: reason
      };

      console.log('üí≥ Calling payment service refund...');
      refundResult = await paymentService.processRefund(refundData);
      console.log('‚úÖ Refund processed successfully:', refundResult.refundId);
    }

    // Update ticket status
    await ticketsService.updateById(ticketId, {
      paymentStatus: 'refunded',
      status: 'cancelled',
      refundId: refundResult.refundId,
      refundedAt: new Date(),
      refundReason: reason
    });

    // ‚úÖ TR·∫¢ GH·∫æ NG·ªíI KHI H·ª¶Y V√â
    try {
      // Ho√†n tr·∫£ gh·∫ø cho chuy·∫øn bay
      const flight: any = await Flight.findById(ticket.flightId);
      if (flight) {
        flight.availableSeats += ticket.passengerCount || 1;
        await flight.save();
        console.log(`‚úÖ ƒê√£ ho√†n tr·∫£ ${ticket.passengerCount || 1} gh·∫ø cho chuy·∫øn bay ${flight.flightCode} khi h·ªßy v√©`);
      }

      // Gi·∫£i ph√≥ng gh·∫ø ƒë√£ ƒë·∫∑t
      if (ticket.seatNumbers && ticket.seatNumbers.length > 0) {
        const seatLayoutService = await import('../services/seatLayout.service');
        await seatLayoutService.default.releaseSeats(ticket.flightId.toString(), ticket.seatNumbers);
        console.log(`‚úÖ ƒê√£ gi·∫£i ph√≥ng ${ticket.seatNumbers.length} gh·∫ø ƒë√£ ƒë·∫∑t cho v√© ${ticket.ticketCode}`);
      }
    } catch (seatError) {
      console.error('‚ùå L·ªói khi tr·∫£ gh·∫ø:', seatError);
      // Kh√¥ng throw error ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n qu√° tr√¨nh ho√†n ti·ªÅn
    }

    // Send refund confirmation email
    await sendRefundConfirmationEmail(ticket, refundResult);

    sendJsonSuccess(res, {
      refundId: refundResult.refundId,
      amount: refundResult.amount,
      currency: refundResult.currency,
      status: refundResult.status,
      ticketId: ticketId,
      paymentMethod: ticket.paymentMethod
    }, httpStatus.OK.statusCode, 'Refund processed successfully');
  } catch (error: any) {
    next(error);
  }
};

// Send refund confirmation email
const sendRefundConfirmationEmail = async (ticket: any, refundResult: any) => {
  try {
    const flight = await Flight.findById(ticket.flightId);

    const emailContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
        <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
          <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="color: #6f42c1; margin: 0;">üí∞ Ho√†n ti·ªÅn th√†nh c√¥ng!</h1>
            <p style="color: #6c757d; margin: 10px 0 0 0;">Y√™u c·∫ßu ho√†n ti·ªÅn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω</p>
          </div>

          <div style="background-color: #e7f3ff; padding: 20px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #007bff;">
            <h2 style="color: #2c3e50; margin-top: 0;">Xin ch√†o ${ticket.passengerName}!</h2>
            <p style="color: #495057; margin-bottom: 0;">
              Ch√∫ng t√¥i ƒë√£ x·ª≠ l√Ω y√™u c·∫ßu ho√†n ti·ªÅn c·ªßa b·∫°n th√†nh c√¥ng.
              S·ªë ti·ªÅn s·∫Ω ƒë∆∞·ª£c ho√†n l·∫°i v√†o t√†i kho·∫£n c·ªßa b·∫°n trong 5-10 ng√†y l√†m vi·ªác.
            </p>
          </div>

          <div style="background-color: #d4edda; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #155724; margin-top: 0;">‚úÖ Th√¥ng tin ho√†n ti·ªÅn</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
              <div>
                <p style="margin: 5px 0; color: #155724;"><strong>M√£ v√©:</strong> ${ticket.ticketCode}</p>
                <p style="margin: 5px 0; color: #155724;"><strong>M√£ ho√†n ti·ªÅn:</strong> ${refundResult.refundId}</p>
                <p style="margin: 5px 0; color: #155724;"><strong>Ng√†y ho√†n ti·ªÅn:</strong> ${new Date().toLocaleString('vi-VN')}</p>
              </div>
              <div>
                <p style="margin: 5px 0; color: #155724;"><strong>S·ªë ti·ªÅn ho√†n l·∫°i:</strong> ${parseFloat(refundResult.metadata?.originalAmount || '0').toLocaleString('vi-VN')} ${refundResult.metadata?.originalCurrency?.toUpperCase() || 'VND'}</p>
                <p style="margin: 5px 0; color: #155724;"><strong>Quy ƒë·ªïi:</strong> $${(refundResult.amount / 100 / 0.000043).toFixed(2)} USD</p>
                <p style="margin: 5px 0; color: #155724;"><strong>L√Ω do:</strong> ${ticket.refundReason || 'Kh√¥ng x√°c ƒë·ªãnh'}</p>
              </div>
            </div>
          </div>

          ${flight ? `
          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #2c3e50; margin-top: 0;">‚úàÔ∏è Th√¥ng tin chuy·∫øn bay (ƒê√£ h·ªßy)</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
              <div>
                <p style="margin: 5px 0; color: #495057;"><strong>Chuy·∫øn bay:</strong> ${flight.flightCode || 'N/A'}</p>
                <p style="margin: 5px 0; color: #495057;"><strong>Tuy·∫øn bay:</strong> ${flight.route || 'N/A'}</p>
              </div>
              <div>
                <p style="margin: 5px 0; color: #495057;"><strong>Kh·ªüi h√†nh:</strong> ${flight.departureTime ? new Date(flight.departureTime).toLocaleString('vi-VN') : 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
                <p style="margin: 5px 0; color: #495057;"><strong>ƒê·∫øn n∆°i:</strong> ${flight.arrivalTime ? new Date(flight.arrivalTime).toLocaleString('vi-VN') : 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
              </div>
            </div>
          </div>
          ` : ''}

          <div style="background-color: #fff3cd; padding: 15px; border-radius: 6px; border-left: 4px solid #ffc107; margin-bottom: 20px;">
            <h4 style="color: #856404; margin-top: 0;">üìã Th√¥ng tin h√†nh kh√°ch</h4>
            <p style="color: #856404; margin: 5px 0;"><strong>H·ªç t√™n:</strong> ${ticket.passengerName}</p>
            <p style="color: #856404; margin: 5px 0;"><strong>Email:</strong> ${ticket.email}</p>
            <p style="color: #856404; margin: 5px 0;"><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ${ticket.phoneNumber}</p>
            ${ticket.seatNumbers ? `<p style="color: #856404; margin: 5px 0;"><strong>Gh·∫ø (ƒê√£ tr·∫£):</strong> ${ticket.seatNumbers.join(', ')}</p>` : ''}
          </div>

          <div style="background-color: #fff3cd; padding: 15px; border-radius: 6px; border-left: 4px solid #ffc107; margin-bottom: 20px;">
            <p style="color: #856404; margin: 0; font-size: 14px;">
              <strong>üí° Th√¥ng tin quan tr·ªçng:</strong><br>
              ‚Ä¢ S·ªë ti·ªÅn s·∫Ω ƒë∆∞·ª£c ho√†n l·∫°i v√†o t√†i kho·∫£n g·ªëc trong 5-10 ng√†y l√†m vi·ªác<br>
              ‚Ä¢ Vui l√≤ng gi·ªØ l·∫°i m√£ ho√†n ti·ªÅn ƒë·ªÉ theo d√µi<br>
              ‚Ä¢ N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá b·ªô ph·∫≠n chƒÉm s√≥c kh√°ch h√†ng<br>
              ‚Ä¢ C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i
            </p>
          </div>

          <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e9ecef;">
            <p style="color: #6c757d; font-size: 14px; margin: 0;">
              Ch√∫ng t√¥i r·∫•t ti·∫øc v·ªÅ s·ª± b·∫•t ti·ªán n√†y v√† hy v·ªçng ƒë∆∞·ª£c ph·ª•c v·ª• b·∫°n trong t∆∞∆°ng lai!
            </p>
            <p style="color: #6c757d; font-size: 14px; margin: 10px 0 0 0;">
              ¬© 2025 Flight Booking. All rights reserved.
            </p>
          </div>
        </div>
      </div>
    `;

    await emailService.sendEmail(
      ticket.email,
      `üí∞ Ho√†n ti·ªÅn th√†nh c√¥ng - V√© m√°y bay ${ticket.ticketCode}`,
      emailContent
    );

    console.log(`‚úÖ ƒê√£ g·ª≠i email x√°c nh·∫≠n ho√†n ti·ªÅn ƒë·∫πp cho ${ticket.email}`);
  } catch (error) {
    console.error('L·ªói g·ª≠i email x√°c nh·∫≠n ho√†n ti·ªÅn ƒë·∫πp:', error);
    // Kh√¥ng throw error ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n qu√° tr√¨nh ho√†n ti·ªÅn
  }
};

// Get payment status for a ticket
const getPaymentStatus = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { ticketId } = req.params;

    // Validate ticket exists and belongs to user
    const ticket = await ticketsService.getById(ticketId);
    if (!ticket) {
      return res.status(404).json({
        statusCode: 404,
        message: 'Ticket not found'
      });
    }

    // Check if user owns the ticket
    const user = res.locals.user;
    if (!ticket.userId.equals(user._id)) {
      return res.status(403).json({
        statusCode: 403,
        message: 'You do not have permission to view this payment'
      });
    }

    let paymentDetails = null;
    if (ticket.paymentIntentId && ticket.paymentMethod !== 'wallet') {
      paymentDetails = await paymentService.getPaymentDetails(ticket.paymentIntentId);
    }

    sendJsonSuccess(res, {
      ticketId: ticket._id,
      paymentStatus: ticket.paymentStatus,
      paymentMethod: ticket.paymentMethod,
      paymentIntentId: ticket.paymentIntentId,
      refundId: ticket.refundId,
      paymentDetails: paymentDetails
    }, httpStatus.OK.statusCode, 'Payment status retrieved successfully');
  } catch (error: any) {
    next(error);
  }
};

// Send wallet payment confirmation email
const sendWalletPaymentConfirmationEmail = async (user: any, ticket: any, flight: any, newBalance: number) => {
  try {
    const emailContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
        <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
          <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="color: #007bff; margin: 0;">üí≥ Thanh to√°n th√†nh c√¥ng!</h1>
            <p style="color: #6c757d; margin: 10px 0 0 0;">ƒê√£ thanh to√°n b·∫±ng v√≠ ƒëi·ªán t·ª≠</p>
          </div>

          <div style="background-color: #e7f3ff; padding: 20px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #007bff;">
            <h2 style="color: #2c3e50; margin-top: 0;">Xin ch√†o ${ticket.passengerName}!</h2>
            <p style="color: #495057; margin-bottom: 0;">
              Thanh to√°n v√© m√°y bay c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng qua v√≠ ƒëi·ªán t·ª≠!
            </p>
          </div>

          <div style="background-color: #d4edda; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #155724; margin-top: 0;">‚úÖ Th√¥ng tin thanh to√°n</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
              <div>
                <p style="margin: 5px 0; color: #155724;"><strong>M√£ v√©:</strong> ${ticket.ticketCode}</p>
                <p style="margin: 5px 0; color: #155724;"><strong>S·ªë ti·ªÅn:</strong> ${ticket.price.toLocaleString('vi-VN')} VND</p>
                <p style="margin: 5px 0; color: #155724;"><strong>Ph∆∞∆°ng th·ª©c:</strong> V√≠ ƒëi·ªán t·ª≠</p>
              </div>
              <div>
                <p style="margin: 5px 0; color: #155724;"><strong>S·ªë d∆∞ c√≤n l·∫°i:</strong> ${newBalance.toLocaleString('vi-VN')} VND</p>
                <p style="margin: 5px 0; color: #155724;"><strong>Ng√†y thanh to√°n:</strong> ${new Date().toLocaleString('vi-VN')}</p>
                <p style="margin: 5px 0; color: #155724;"><strong>Tr·∫°ng th√°i:</strong> Ho√†n th√†nh</p>
              </div>
            </div>
          </div>

          ${flight ? `
          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #2c3e50; margin-top: 0;">‚úàÔ∏è Th√¥ng tin chuy·∫øn bay</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
              <div>
                <p style="margin: 5px 0; color: #495057;"><strong>Chuy·∫øn bay:</strong> ${flight.flightCode || 'N/A'}</p>
                <p style="margin: 5px 0; color: #495057;"><strong>Tuy·∫øn bay:</strong> ${flight.route || 'N/A'}</p>
              </div>
              <div>
                <p style="margin: 5px 0; color: #495057;"><strong>Kh·ªüi h√†nh:</strong> ${flight.departureTime ? new Date(flight.departureTime).toLocaleString('vi-VN') : 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
                <p style="margin: 5px 0; color: #495057;"><strong>ƒê·∫øn n∆°i:</strong> ${flight.arrivalTime ? new Date(flight.arrivalTime).toLocaleString('vi-VN') : 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
              </div>
            </div>
          </div>
          ` : ''}

          <div style="background-color: #fff3cd; padding: 15px; border-radius: 6px; border-left: 4px solid #ffc107; margin-bottom: 20px;">
            <h4 style="color: #856404; margin-top: 0;">üìã Th√¥ng tin h√†nh kh√°ch</h4>
            <p style="color: #856404; margin: 5px 0;"><strong>H·ªç t√™n:</strong> ${ticket.passengerName}</p>
            <p style="color: #856404; margin: 5px 0;"><strong>Email:</strong> ${ticket.email}</p>
            <p style="color: #856404; margin: 5px 0;"><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ${ticket.phoneNumber}</p>
            ${ticket.seatNumbers ? `<p style="color: #856404; margin: 5px 0;"><strong>Gh·∫ø:</strong> ${ticket.seatNumbers.join(', ')}</p>` : ''}
          </div>

          <div style="background-color: #d1ecf1; padding: 15px; border-radius: 6px; border-left: 4px solid #17a2b8; margin-bottom: 20px;">
            <h4 style="color: #0c5460; margin-top: 0;">üí° L∆∞u √Ω</h4>
            <p style="color: #0c5460; margin: 5px 0; font-size: 14px;">
              ‚Ä¢ V√© c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng ƒë·ªÉ s·ª≠ d·ª•ng<br>
              ‚Ä¢ Vui l√≤ng ƒë·∫øn s√¢n bay tr∆∞·ªõc 2 ti·∫øng<br>
              ‚Ä¢ Mang theo gi·∫•y t·ªù t√πy th√¢n<br>
              ‚Ä¢ S·ªë d∆∞ v√≠ c√≤n l·∫°i: ${newBalance.toLocaleString('vi-VN')} VND
            </p>
          </div>

          <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e9ecef;">
            <p style="color: #6c757d; font-size: 14px; margin: 0;">
              Ch√∫c b·∫°n c√≥ m·ªôt chuy·∫øn bay an to√†n v√† vui v·∫ª!
            </p>
            <p style="color: #6c757d; font-size: 14px; margin: 10px 0 0 0;">
              ¬© 2025 Flight Booking. All rights reserved.
            </p>
          </div>
        </div>
      </div>
    `;

    await emailService.sendEmail(
      ticket.email,
      `üí≥ Thanh to√°n th√†nh c√¥ng - V√© m√°y bay ${ticket.ticketCode}`,
      emailContent
    );

    console.log(`‚úÖ ƒê√£ g·ª≠i email x√°c nh·∫≠n thanh to√°n v√≠ cho ${ticket.email}`);
  } catch (error) {
    console.error('L·ªói g·ª≠i email x√°c nh·∫≠n thanh to√°n v√≠:', error);
    // Kh√¥ng throw error ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n thanh to√°n
  }
};

export default {
  createPaymentIntent,
  confirmPayment,
  processRefund,
  getPaymentStatus,
  sendWalletPaymentConfirmationEmail
};
