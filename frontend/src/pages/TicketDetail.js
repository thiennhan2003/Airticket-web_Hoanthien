import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import QRCode from 'qrcode';
import './TicketDetail.css';

const TicketDetail = ({ user, setUser }) => {
  const { ticketId } = useParams();
  const navigate = useNavigate();
  const location = useLocation();
  const [ticket, setTicket] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [checkinLoading, setCheckinLoading] = useState(false);
  const [checkinError, setCheckinError] = useState('');
  const [qrCodeUrl, setQrCodeUrl] = useState('');

  useEffect(() => {
    // N·∫øu c√≥ d·ªØ li·ªáu v√© t·ª´ state (t·ª´ Profile page), s·ª≠ d·ª•ng lu√¥n
    if (location.state?.ticketData) {
      setTicket(location.state.ticketData);
      setLoading(false);
      return;
    }

    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, fetch t·ª´ API
    fetchTicketDetail();
  }, [ticketId, location.state]);

  // T·ª± ƒë·ªông t·∫°o QR code n·∫øu v√© ƒë√£ check-in v√† c√≥ d·ªØ li·ªáu QR
  useEffect(() => {
    if (ticket && ticket.status === 'checked-in' && ticket.qrCode && !qrCodeUrl) {
      generateQRCodeFromData(ticket.qrCode);
    }
  }, [ticket, qrCodeUrl]);

  const generateQRCodeFromData = async (qrData) => {
    try {
      const qrCodeDataUrl = await QRCode.toDataURL(qrData, {
        width: 200,
        margin: 2,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        }
      });
      setQrCodeUrl(qrCodeDataUrl);
    } catch (qrError) {
      console.error('L·ªói t·∫°o QR code t·ª´ d·ªØ li·ªáu:', qrError);
    }
  };

  const fetchTicketDetail = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('accessToken');

      if (!token) {
        navigate('/login');
        return;
      }

      const response = await fetch(`http://localhost:8080/api/v1/tickets/${ticketId}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin v√©');
      }

      const data = await response.json();
      setTicket(data.data || data);
    } catch (error) {
      console.error('L·ªói khi t·∫£i v√©:', error);
      setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin v√©');
    } finally {
      setLoading(false);
    }
  };

  const handleCheckin = async () => {
    try {
      setCheckinLoading(true);
      setCheckinError('');

      const token = localStorage.getItem('accessToken');
      if (!token) {
        navigate('/login');
        return;
      }

      const response = await fetch(`http://localhost:8080/api/v1/tickets/${ticketId}/checkin`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Kh√¥ng th·ªÉ check-in');
      }

      const data = await response.json();

      // C·∫≠p nh·∫≠t th√¥ng tin v√© v·ªõi QR code
      setTicket(data.data);
      // Kh√¥ng c·∫ßn setQrCodeUrl('') n·ªØa v√¨ useEffect s·∫Ω t·ª± ƒë·ªông t·∫°o l·∫°i

      // T·∫°o QR code t·ª´ d·ªØ li·ªáu tr·∫£ v·ªÅ
      if (data.data.qrCode) {
        generateQRCodeFromData(data.data.qrCode);
      }

      alert('‚úÖ Check-in th√†nh c√¥ng! QR code ƒë√£ ƒë∆∞·ª£c t·∫°o.');
    } catch (error) {
      console.error('L·ªói check-in:', error);
      setCheckinError(error.message || 'Kh√¥ng th·ªÉ check-in. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setCheckinLoading(false);
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);
  };

  const formatSeatInfo = (ticket) => {
    const seatClasses = ticket.seatClasses || [ticket.ticketClass || ticket.class || 'Economy'];
    const seatNumbers = ticket.seatNumbers || [ticket.seatNumber || 'N/A'];

    if (seatClasses.length === 1) {
      return {
        class: seatClasses[0],
        seats: seatNumbers[0]
      };
    }

    return {
      class: `${seatClasses.length} gh·∫ø (${seatClasses.join(', ')})`,
      seats: seatNumbers.join(', ')
    };
  };

  const renderSeatInfo = (ticket) => {
    const seatInfo = formatSeatInfo(ticket);

    return (
      <div className="seat-display">
        <div className="seat-class-badge">
          {seatInfo.class}
        </div>
        <div className="seat-numbers">
          Gh·∫ø: {seatInfo.seats}
        </div>
      </div>
    );
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'paid': return '#1976d2';
      case 'pending': return '#f57c00';
      case 'refunded': return '#7b1fa2';
      case 'failed': return '#d32f2f';
      default: return '#666';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'paid': return 'ƒê√£ thanh to√°n';
      case 'pending': return 'Ch·ªù thanh to√°n';
      case 'refunded': return 'ƒê√£ ho√†n ti·ªÅn';
      case 'failed': return 'Th·∫•t b·∫°i';
      default: return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  if (loading) {
    return (
      <div className="ticket-detail-container">
        <div className="loading">ƒêang t·∫£i th√¥ng tin v√©...</div>
      </div>
    );
  }

  if (error || !ticket) {
    return (
      <div className="ticket-detail-container">
        <div className="error-state">
          <div className="error-icon">‚ö†Ô∏è</div>
          <h3>{error || 'Kh√¥ng t√¨m th·∫•y v√©'}</h3>
          <button onClick={() => navigate('/profile')} className="back-btn">
            ‚Üê Quay l·∫°i h·ªì s∆°
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="ticket-detail-container">
      <div className="ticket-detail-header">
        <button onClick={() => navigate('/profile')} className="back-btn">
          ‚Üê Quay l·∫°i h·ªì s∆°
        </button>
        <h2>Chi ti·∫øt v√© m√°y bay</h2>
      </div>

      <div className="ticket-detail-content">
        {/* Th√¥ng tin c∆° b·∫£n */}
        <div className="ticket-section">
          <h3 className="section-title">üìã Th√¥ng tin v√©</h3>
          <div className="ticket-info-grid">
            <div className="info-item">
              <span className="info-label">M√£ v√©:</span>
              <span className="info-value ticket-code">{ticket.ticketCode}</span>
            </div>
            <div className="info-item">
              <span className="info-label">Tr·∫°ng th√°i:</span>
              <span className="info-value status-badge" style={{
                backgroundColor: getStatusColor(ticket.paymentStatus),
                color: 'white'
              }}>
                {getStatusText(ticket.paymentStatus)}
              </span>
            </div>
            <div className="info-item">
              <span className="info-label">Gi√° v√©:</span>
              <span className="info-value price">{formatCurrency(ticket.price)}</span>
            </div>
            <div className="info-item">
              <span className="info-label">Ng√†y ƒë·∫∑t:</span>
              <span className="info-value">{formatDate(ticket.bookingDate)}</span>
            </div>
          </div>
        </div>

        {/* Th√¥ng tin h√†nh kh√°ch */}
        <div className="ticket-section">
          <h3 className="section-title">üë§ Th√¥ng tin h√†nh kh√°ch</h3>
          <div className="passenger-info">
            <div className="passenger-avatar">
              {ticket.passengerName ? ticket.passengerName.charAt(0).toUpperCase() : 'N'}
            </div>
            <div className="passenger-details">
              <h4>{ticket.passengerName}</h4>
              <p><strong>Email:</strong> {ticket.email}</p>
              <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {ticket.phoneNumber}</p>
            </div>
          </div>
        </div>

        {/* Th√¥ng tin chuy·∫øn bay */}
        <div className="ticket-section">
          <h3 className="section-title">‚úàÔ∏è Th√¥ng tin chuy·∫øn bay</h3>
          <div className="flight-info-card">
            <div className="flight-route">
              <div className="route-info">
                <h4>{ticket.flightId?.route || ticket.route || 'N/A'}</h4>
                <p className="flight-code">{ticket.flightId?.flightCode || ticket.flightCode || 'N/A'}</p>
              </div>
              <div className="seat-info">
                {renderSeatInfo(ticket)}
              </div>
            </div>

            {/* Th√¥ng tin th·ªùi gian (n·∫øu c√≥) */}
            {ticket.flightId && (
              <div className="flight-times">
                <div className="time-info">
                  <span className="time-label">Kh·ªüi h√†nh:</span>
                  <span className="time-value">
                    {ticket.flightId.departureTime ?
                      formatDate(ticket.flightId.departureTime) : 'Ch∆∞a x√°c ƒë·ªãnh'}
                  </span>
                </div>
                <div className="time-info">
                  <span className="time-label">ƒê·∫øn n∆°i:</span>
                  <span className="time-value">
                    {ticket.flightId.arrivalTime ?
                      formatDate(ticket.flightId.arrivalTime) : 'Ch∆∞a x√°c ƒë·ªãnh'}
                  </span>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* L·ªãch s·ª≠ thanh to√°n */}
        {(ticket.paidAt || ticket.refundedAt) && (
          <div className="ticket-section">
            <h3 className="section-title">üí≥ L·ªãch s·ª≠ thanh to√°n</h3>
            <div className="payment-timeline">
              {ticket.paidAt && (
                <div className="timeline-item paid">
                  <div className="timeline-dot"></div>
                  <div className="timeline-content">
                    <h4>Thanh to√°n th√†nh c√¥ng</h4>
                    <p>{formatDate(ticket.paidAt)}</p>
                    {ticket.paymentMethod && (
                      <span className="payment-method">Ph∆∞∆°ng th·ª©c: {ticket.paymentMethod}</span>
                    )}
                  </div>
                </div>
              )}

              {ticket.refundedAt && (
                <div className="timeline-item refunded">
                  <div className="timeline-dot"></div>
                  <div className="timeline-content">
                    <h4>ƒê√£ ho√†n ti·ªÅn</h4>
                    <p>{formatDate(ticket.refundedAt)}</p>
                    {ticket.refundId && (
                      <span className="refund-id">M√£ ho√†n ti·ªÅn: {ticket.refundId}</span>
                    )}
                    {ticket.refundReason && (
                      <span className="refund-reason">L√Ω do: {ticket.refundReason}</span>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Th√¥ng tin b·ªï sung */}
        <div className="ticket-section">
          <h3 className="section-title">üìã Th√¥ng tin b·ªï sung</h3>
          <div className="additional-info">
            <div className="info-row">
              <span className="info-label">S·ªë l∆∞·ª£ng h√†nh kh√°ch:</span>
              <span className="info-value">{ticket.passengerCount || 1}</span>
            </div>

            {ticket.paymentIntentId && (
              <div className="info-row">
                <span className="info-label">M√£ thanh to√°n:</span>
                <span className="info-value mono">{ticket.paymentIntentId}</span>
              </div>
            )}

            {ticket.qrCode && ticket.status === 'checked-in' && (
              <div className="info-row">
                <span className="info-label">QR Code:</span>
                <div className="qr-display">
                  {qrCodeUrl ? (
                    <img src={qrCodeUrl} alt="QR Code" />
                  ) : (
                    <div className="qr-placeholder">
                      <p>ƒêang t·∫°o m√£ QR...</p>
                    </div>
                  )}
                  <p className="qr-instruction">
                    üì± Xu·∫•t tr√¨nh m√£ QR n√†y t·∫°i qu·∫ßy check-in s√¢n bay
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Actions */}
        <div className="ticket-actions">
          {ticket.paymentStatus === 'paid' && ticket.status !== 'checked-in' && (
            <button
              onClick={handleCheckin}
              disabled={checkinLoading}
              className="action-btn checkin-btn"
            >
              {checkinLoading ? '‚è≥ ƒêang check-in...' : '‚úÖ Check-in tr·ª±c tuy·∫øn'}
            </button>
          )}

          {checkinError && (
            <div className="checkin-error">
              ‚ö†Ô∏è {checkinError}
            </div>
          )}

          {ticket.paymentStatus === 'paid' && (
            <button
              onClick={() => {
                if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy v√© n√†y?')) {
                  // G·ªçi API h·ªßy v√©
                  navigate('/profile');
                }
              }}
              className="action-btn cancel-btn"
            >
              ‚ùå H·ªßy v√©
            </button>
          )}

          <button
            onClick={() => navigate('/profile')}
            className="action-btn back-btn"
          >
            ‚Üê Quay l·∫°i h·ªì s∆°
          </button>
        </div>
      </div>
    </div>
  );
};

export default TicketDetail;
