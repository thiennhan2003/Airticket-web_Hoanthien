import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import PaymentForm from '../components/PaymentForm';
import CouponInput from '../components/CouponInput';
import './Booking.css';
import './Payment.css';

const Payment = ({ user }) => {
  const { ticketId } = useParams();
  const location = useLocation();
  const navigate = useNavigate();
  const [ticket, setTicket] = useState(null);
  const [loading, setLoading] = useState(true);
  const [paymentError, setPaymentError] = useState(null);
  const [paymentSuccess, setPaymentSuccess] = useState(false);
  const [appliedCoupon, setAppliedCoupon] = useState(null);
  const [discountAmount, setDiscountAmount] = useState(0);
  const [finalAmount, setFinalAmount] = useState(0);

  useEffect(() => {
    const fetchTicket = async () => {
      try {
        // ‚úÖ N·∫øu c√≥ d·ªØ li·ªáu v√© ƒë∆∞·ª£c truy·ªÅn t·ª´ trang Profile, d√πng lu√¥n
        if (location.state?.ticketData) {
          console.log('üìã D·ªØ li·ªáu v√© t·ª´ Profile:', location.state.ticketData);
          const ticketData = location.state.ticketData;

          // ƒê·∫£m b·∫£o c√°c tr∆∞·ªùng c·∫ßn thi·∫øt c√≥ m·∫∑t
          const normalizedTicket = {
            ...ticketData,
            ticketId: ticketData.ticketId || ticketData._id,
            totalPrice: ticketData.totalPrice || ticketData.price,
            flightCode: ticketData.flightId?.flightCode || ticketData.flightCode || 'N/A',
            route: ticketData.flightId?.route || ticketData.route || 'N/A',
            passengerCount: ticketData.passengerCount || 1,
            seatNumbers: ticketData.seatNumbers || ticketData.selectedSeats || [ticketData.seatNumber || 'N/A'],
            seatClasses: ticketData.seatClasses || [ticketData.ticketClass || ticketData.class || 'economy'],
            bookingDate: ticketData.bookingDate,
            paymentStatus: ticketData.paymentStatus
          };

          setTicket(normalizedTicket);
          setLoading(false);
          return;
        }

        // ‚úÖ N·∫øu kh√¥ng c√≥, fallback sang g·ªçi API
        if (ticketId) {
          const response = await fetch(`http://localhost:8080/api/v1/tickets/${ticket._id}`, {
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
              'Content-Type': 'application/json'
            }
          });

          if (response.ok) {
            const data = await response.json();
            setTicket(data.data);
          } else {
            alert('Kh√¥ng t√¨m th·∫•y th√¥ng tin v√©');
            navigate('/');
          }
        } else {
          alert('Kh√¥ng c√≥ th√¥ng tin v√© ƒë·ªÉ thanh to√°n');
          navigate('/');
        }
      } catch (error) {
        console.error('L·ªói l·∫•y th√¥ng tin v√©:', error);
        alert('L·ªói k·∫øt n·ªëi server');
        navigate('/');
      } finally {
        setLoading(false);
      }
    };

    const token = localStorage.getItem('accessToken');
    if (!token) {
      navigate('/login');
      return;
    }

    fetchTicket();
  }, [ticketId, location.state, navigate]);

  // T√≠nh to√°n finalAmount khi ticket ho·∫∑c discount thay ƒë·ªïi
  useEffect(() => {
    if (ticket) {
      const originalAmount = ticket.totalPrice || 0;
      const discount = discountAmount || 0;
      setFinalAmount(Math.max(0, originalAmount - discount));
    }
  }, [ticket, discountAmount]);
  
  
  // H√†m x·ª≠ l√Ω thanh to√°n th√†nh c√¥ng
  const handlePaymentSuccess = async (paymentIntentId) => {
    // N·∫øu payment ƒë√£ ho√†n th√†nh tr∆∞·ªõc ƒë√≥, ch·ªâ c·∫ßn set success state
    if (paymentIntentId === 'already-paid') {
      setPaymentSuccess(true);
      setPaymentError(null);
      console.log('‚úÖ Payment was already completed');
      return;
    }

    setPaymentSuccess(true);
    setPaymentError(null);

    try {
      const token = localStorage.getItem('accessToken');

      // G·ªçi API ƒë·ªÉ x√°c nh·∫≠n thanh to√°n
      const response = await fetch(`http://localhost:8080/api/v1/payments/confirm-payment`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          paymentIntentId: paymentIntentId
        }),
      });

      if (response.ok) {
        // L·∫•y ticket m·ªõi t·ª´ backend
        const updatedTicketData = await response.json();
        const updatedTicket = updatedTicketData.data || updatedTicketData;

        console.log('‚úÖ V√© ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i "paid"', updatedTicket);

        // C·∫≠p nh·∫≠t state ticket v·ªõi d·ªØ li·ªáu backend
        setTicket(prev => ({
          ...prev,
          ...updatedTicket
        }));

        // Apply coupon sau khi thanh to√°n th√†nh c√¥ng
        await applyCouponAfterPayment();

      } else {
        const errorData = await response.json();
        console.error('‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i v√©:', errorData.message || response.statusText);
        setPaymentError('C·∫≠p nh·∫≠t tr·∫°ng th√°i v√© th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } catch (error) {
      console.error('‚ùå L·ªói k·∫øt n·ªëi khi c·∫≠p nh·∫≠t v√©:', error);
      setPaymentError('L·ªói k·∫øt n·ªëi server. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };
  

  // H√†m x·ª≠ l√Ω l·ªói thanh to√°n
  const handlePaymentError = (error) => {
    setPaymentError(error);
  };

  // X·ª≠ l√Ω khi coupon ƒë∆∞·ª£c √°p d·ª•ng
  const handleCouponApplied = (couponData) => {
    setAppliedCoupon(couponData.coupon);
    setDiscountAmount(couponData.discountAmount);
    console.log('‚úÖ Coupon applied:', couponData);
  };

  // X·ª≠ l√Ω khi coupon b·ªã x√≥a
  const handleCouponRemoved = () => {
    setAppliedCoupon(null);
    setDiscountAmount(0);
    console.log('üóëÔ∏è Coupon removed');
  };

  // Apply coupon sau khi thanh to√°n th√†nh c√¥ng
  const applyCouponAfterPayment = async () => {
    if (appliedCoupon && ticket) {
      try {
        const token = localStorage.getItem('accessToken');
        await fetch('http://localhost:8080/api/v1/coupons/apply', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify({
            couponId: appliedCoupon._id,
          }),
        });
        console.log('‚úÖ Coupon applied successfully');
      } catch (error) {
        console.error('‚ùå Error applying coupon:', error);
      }
    }
  };

  if (loading) {
    return (
      <div className="booking-container">
        <div className="loading">ƒêang t·∫£i th√¥ng tin v√©...</div>
      </div>
    );
  }

  if (!ticket) {
    return (
      <div className="booking-container">
        <div className="error">
          <h3>Kh√¥ng t√¨m th·∫•y th√¥ng tin v√©</h3>
          <p>Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.</p>
          <button onClick={() => navigate('/')} className="back-btn">
            ‚Üê V·ªÅ trang ch·ªß
          </button>
        </div>
      </div>
    );
  }

  // Debug: Log th√¥ng tin ticket ƒë·ªÉ ki·ªÉm tra
  console.log('üé´ Th√¥ng tin v√© thanh to√°n:', {
    ticketId: ticket.ticketId,
    totalPrice: ticket.totalPrice,
    flightCode: ticket.flightCode,
    route: ticket.route,
    passengerCount: ticket.passengerCount,
    seatClasses: ticket.seatClasses,
    seatNumbers: ticket.seatNumbers,
    bookingDate: ticket.bookingDate,
    paymentStatus: ticket.paymentStatus
  });

  if (paymentSuccess) {
    return (
      <div className="booking-container">
        <div className="booking-header">
          <h2>‚úÖ Ho√†n t·∫•t thanh to√°n</h2>
          <div className="success-buttons">
            <button onClick={() => navigate('/')} className="back-btn">
              ‚Üê V·ªÅ trang ch·ªß
            </button>
            <button onClick={() => navigate('/profile')} className="profile-btn">
              üë§ Xem v√© c·ªßa t√¥i
            </button>
          </div>
        </div>

        <div className="booking-content">
          <div className="booking-confirmation">
            <div className="confirmation-card">
              <div className="confirmation-icon">‚úÖ</div>
              <div className="confirmation-message">
                <h3>‚úÖ Ho√†n t·∫•t thanh to√°n</h3>
                <p>M√£ thanh to√°n demo: <strong>{ticket.ticketId?.slice(-8).toUpperCase()}</strong></p>
                <p>‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i v√© th√†nh <strong>"ƒê√£ thanh to√°n"</strong></p>
                <p>‚è∞ H·∫°n thanh to√°n ƒë√£ ƒë∆∞·ª£c d·ª´ng l·∫°i</p>
                <p>üìß <strong>Email x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i</strong> ƒë·∫øn {user?.email}</p>
                <p>B·∫°n c√≥ th·ªÉ ki·ªÉm tra v√© trong trang h·ªì s∆° c√° nh√¢n.</p>
              </div>

              <div className="booking-details">
                <div className="detail-item">
                  <span><strong>M√£ v√©:</strong></span>
                  <span>{ticket.ticketId?.slice(-8).toUpperCase()}</span>
                </div>
                <div className="detail-item">
                  <span><strong>M√£ chuy·∫øn bay:</strong></span>
                  <span>{ticket.flightCode}</span>
                </div>
                <div className="detail-item">
                  <span><strong>Tuy·∫øn bay:</strong></span>
                  <span>{ticket.route}</span>
                </div>
                <div className="detail-item">
                  <span><strong>S·ªë h√†nh kh√°ch:</strong></span>
                  <span>{ticket.passengerCount}</span>
                </div>
                <div className="detail-item">
                  <span><strong>Chi ti·∫øt gh·∫ø:</strong></span>
                  <span>
                    {ticket.seatClasses && ticket.seatNumbers && ticket.seatClasses.length > 0 ? (
                      ticket.seatClasses.map((seatClass, index) => (
                        <div key={index} style={{ marginBottom: '2px' }}>
                          <span className="capitalize">
                            Gh·∫ø {ticket.seatNumbers[index]} - {seatClass}
                          </span>
                        </div>
                      ))
                    ) : (
                      <span className="capitalize">{ticket.seatClasses || ticket.class}</span>
                    )}
                  </span>
                </div>
                <div className="detail-item">
                  <span><strong>T·ªïng ti·ªÅn:</strong></span>
                  <span className="price">
                    {new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(ticket.totalPrice)}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="booking-container">
      <div className="booking-header">
        <h2> ƒê∆°n thanh to√°n </h2>
        <button onClick={() => navigate('/')} className="back-btn">
          ‚Üê V·ªÅ trang ch·ªß
        </button>
      </div>

      <div className="booking-content">
        {/* Th√¥ng tin v√© c·∫ßn thanh to√°n */}
        <div className="payment-ticket-info">
          <h3>Th√¥ng tin v√© thanh to√°n</h3>
          <div className="ticket-summary-card">
            <div className="ticket-details">
              <div className="detail-item">
                <span><strong>M√£ v√©:</strong></span>
                <span>{ticket.ticketId?.slice(-8).toUpperCase()}</span>
              </div>
              <div className="detail-item">
                <span><strong>M√£ chuy·∫øn bay:</strong></span>
                <span>{ticket.flightCode}</span>
              </div>
              <div className="detail-item">
                <span><strong>Tuy·∫øn bay:</strong></span>
                <span>{ticket.route}</span>
              </div>
              <div className="detail-item">
                <span><strong>S·ªë l∆∞·ª£ng h√†nh kh√°ch:</strong></span>
                <span>{ticket.passengerCount}</span>
              </div>
              <div className="detail-item">
                <span><strong>Chi ti·∫øt gh·∫ø:</strong></span>
                <span>
                  {ticket.seatClasses && ticket.seatNumbers && ticket.seatClasses.length > 0 ? (
                    ticket.seatClasses.map((seatClass, index) => (
                      <div key={index} style={{ marginBottom: '4px' }}>
                        <span className="capitalize">
                          Gh·∫ø {ticket.seatNumbers[index]} - {seatClass}
                        </span>
                      </div>
                    ))
                  ) : (
                    <span className="capitalize">{ticket.seatClasses || ticket.class}</span>
                  )}
                </span>
              </div>
              <div className="detail-item">
                <span><strong>T·ªïng ti·ªÅn:</strong></span>
                <span className="price">
                  {new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(ticket.totalPrice)}
                </span>
              </div>
              {appliedCoupon && (
                <>
                  <div className="detail-item">
                    <span><strong>M√£ gi·∫£m gi√°:</strong></span>
                    <span style={{ color: '#4caf50', fontWeight: 'bold' }}>
                      {appliedCoupon.code} ({appliedCoupon.discountType === 'percentage'
                        ? `${appliedCoupon.discountValue}%`
                        : new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(appliedCoupon.discountValue)
                      })
                    </span>
                  </div>
                  <div className="detail-item">
                    <span><strong>Gi·∫£m gi√°:</strong></span>
                    <span style={{ color: '#4caf50', fontWeight: 'bold' }}>
                      -{new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(discountAmount)}
                    </span>
                  </div>
                  <div className="detail-item" style={{ borderTop: '2px solid #4caf50', paddingTop: '10px' }}>
                    <span><strong>Th√†nh ti·ªÅn:</strong></span>
                    <span className="price" style={{ color: '#4caf50', fontSize: '1.2em' }}>
                      {new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(finalAmount)}
                    </span>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>

        {/* Th√¥ng tin h√†nh kh√°ch */}
        <div className="passenger-details">
          <h3>Th√¥ng tin h√†nh kh√°ch</h3>
          <div className="passenger-info">
            <p><strong>H·ªç t√™n:</strong> {user?.fullName || `${user?.firstName} ${user?.lastName}`}</p>
            <p><strong>Email:</strong> {user?.email}</p>
            <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {user?.phoneNumber || 'Ch∆∞a c·∫≠p nh·∫≠t'}</p>
          </div>
        </div>

        {/* M√£ gi·∫£m gi√° */}
        <div className="coupon-section">
          <h3>üé´ M√£ gi·∫£m gi√°</h3>
          <div className="coupon-wrapper">
            <CouponInput
              onCouponApplied={handleCouponApplied}
              onCouponRemoved={handleCouponRemoved}
              originalAmount={ticket.totalPrice}
            />
          </div>
        </div>

        {/* Form thanh to√°n */}
        <div className="payment-section">
          <h3>Th√¥ng tin thanh to√°n</h3>
          <div className="payment-container">
            <PaymentForm
              amount={finalAmount}
              currency="vnd"
              ticketId={ticket.ticketId}
              onPaymentSuccess={handlePaymentSuccess}
              onPaymentError={handlePaymentError}
            />
            {paymentError && (
              <div className="error-message" style={{ marginTop: '15px', textAlign: 'center' }}>
                {paymentError}
              </div>
            )}
          </div>
        </div>

        {/* Th√¥ng b√°o quan tr·ªçng */}
        <div className="payment-notice">
          <div className="demo-notice">
            üîí <strong>Thanh to√°n an to√†n</strong><br/>
            H·ªá th·ªëng t√≠ch h·ª£p Stripe ƒë·ªÉ x·ª≠ l√Ω thanh to√°n th·ª±c t·∫ø v√† b·∫£o m·∫≠t.<br/>
            Th√¥ng tin th·∫ª ƒë∆∞·ª£c m√£ h√≥a v√† b·∫£o v·ªá theo ti√™u chu·∫©n PCI DSS.
          </div>
        </div>
      </div>
    </div>
  );
};

export default Payment;
