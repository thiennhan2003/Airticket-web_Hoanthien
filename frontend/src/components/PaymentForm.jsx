import React, { useState, useEffect } from 'react';
import { loadStripe } from '@stripe/stripe-js';
import { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';
import './Payment.css';

const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY || 'pk_test_your_publishable_key_here');

// Payment Method Selection Component
const PaymentMethodSelector = ({ selectedMethod, onMethodChange, walletBalance, amount }) => {
  const paymentMethods = [
    {
      id: 'stripe',
      name: 'Th·∫ª t√≠n d·ª•ng',
      icon: 'üí≥',
      description: 'Thanh to√°n b·∫±ng th·∫ª Visa, MasterCard',
      available: true
    },
    {
      id: 'wallet',
      name: 'V√≠ ƒëi·ªán t·ª≠',
      icon: 'üëõ',
      description: `S·ªë d∆∞: ${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(walletBalance)}`,
      available: walletBalance >= amount,
      disabled: walletBalance < amount
    }
  ];

  return (
    <div className="payment-methods">
      {paymentMethods.map((method) => (
        <div
          key={method.id}
          className={`payment-method-card ${selectedMethod === method.id ? 'selected' : ''} ${!method.available ? 'disabled' : ''}`}
          onClick={() => method.available && onMethodChange(method.id)}
        >
          <div className="method-header">
            <div className="method-icon">{method.icon}</div>
            <div className="method-info">
              <div className="method-name">{method.name}</div>
              <div className="method-description">{method.description}</div>
            </div>
            <div className="method-radio">
              <input
                type="radio"
                checked={selectedMethod === method.id}
                onChange={() => method.available && onMethodChange(method.id)}
                disabled={!method.available}
              />
            </div>
          </div>
          {!method.available && (
            <div className="method-error">
              {method.id === 'wallet' ? 'S·ªë d∆∞ kh√¥ng ƒë·ªß' : 'Ph∆∞∆°ng th·ª©c kh√¥ng kh·∫£ d·ª•ng'}
            </div>
          )}
        </div>
      ))}
    </div>
  );
};

// Stripe Payment Form
const StripePaymentForm = ({ amount, currency, ticketId, onPaymentSuccess, onPaymentError }) => {
  const stripe = useStripe();
  const elements = useElements();

  const [loading, setLoading] = useState(false);
  const [clientSecret, setClientSecret] = useState('');
  const [error, setError] = useState('');

  // C√°c state cho form fake
  const [name, setName] = useState('');
  const [cardNumber, setCardNumber] = useState('');
  const [expiry, setExpiry] = useState('');
  const [cvc, setCvc] = useState('');

  useEffect(() => {
    const createPaymentIntent = async () => {
      try {
        const token = localStorage.getItem('accessToken');
        if (!token) {
          setError('Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c');
          return;
        }

        const response = await fetch('http://localhost:8080/api/v1/payments/create-payment-intent', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify({ ticketId, amount, currency, paymentMethod: 'stripe' }),
        });

        if (response.ok) {
          const data = await response.json();
          setClientSecret(data.data?.clientSecret || '');
          if (!data.data?.clientSecret) setError('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c client secret t·ª´ server');
        } else {
          const err = await response.json();
          setError(err.message || 'Kh√¥ng th·ªÉ t·∫°o payment intent');
        }
      } catch (err) {
        console.error(err);
        setError('L·ªói k·∫øt n·ªëi server');
      }
    };

    if (ticketId && amount > 0) createPaymentIntent();
  }, [ticketId, amount, currency]);

  const handleSubmit = async (event) => {
    event.preventDefault();
    if (!stripe || !elements) return setError('Stripe ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
    if (!clientSecret) return setError('Ch∆∞a nh·∫≠n ƒë∆∞·ª£c client secret');

    setLoading(true);
    setError('');

    try {
      const cardElement = elements.getElement(CardElement);
      if (!cardElement) return setError('Kh√¥ng t√¨m th·∫•y form th·∫ª');

      const { error: stripeError, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
        payment_method: {
          card: cardElement,
          billing_details: { name: name || 'Kh√°ch h√†ng' },
        },
      });

      if (stripeError) setError(stripeError.message || 'Thanh to√°n th·∫•t b·∫°i');
      else if (paymentIntent.status === 'succeeded') {
        const token = localStorage.getItem('accessToken');
        const confirmResponse = await fetch('http://localhost:8080/api/v1/payments/confirm-payment', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify({ paymentIntentId: paymentIntent.id }),
        });

        if (confirmResponse.ok) onPaymentSuccess(paymentIntent.id);
        else {
          const errData = await confirmResponse.json();
          setError(errData.message || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n thanh to√°n');
        }
      } else setError('Thanh to√°n kh√¥ng th√†nh c√¥ng');
    } catch (err) {
      console.error(err);
      setError('L·ªói x·ª≠ l√Ω thanh to√°n');
    }
    setLoading(false);
  };

  const cardStyle = {
    style: {
      base: { fontSize: '16px', color: '#424770', '::placeholder': { color: '#aab7c4' } },
      invalid: { color: '#fa755a', iconColor: '#fa755a' },
    },
  };

  return (
    <div className="payment-form">
      <h3>T·ªïng ti·ªÅn: {new Intl.NumberFormat('vi-VN', { style: 'currency', currency }).format(amount)}</h3>
      <p>Thanh to√°n an to√†n v·ªõi Stripe</p>

      {error && <div className="error-message">{error}</div>}

      <form onSubmit={handleSubmit}>
        {/* T√™n ch·ªß th·∫ª */}
        <div className="form-group">
          <label>T√™n ch·ªß th·∫ª</label>
          <input
            type="text"
            placeholder="NGUYEN VAN A"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            disabled={loading}
          />
        </div>

        {/* Fake card inputs */}
        <div className="form-group-inline">
          <input
            type="text"
            placeholder="S·ªë th·∫ª 1234 5678 9012 3456"
            value={cardNumber}
            onChange={(e) => setCardNumber(e.target.value)}
            disabled={loading}
          />
          <input
            type="text"
            placeholder="MM/YY"
            value={expiry}
            onChange={(e) => setExpiry(e.target.value)}
            disabled={loading}
          />
          <input
            type="text"
            placeholder="CVC"
            value={cvc}
            onChange={(e) => setCvc(e.target.value)}
            disabled={loading}
          />
        </div>

        {/* Stripe CardElement th·ª±c t·∫ø */}
        <div className="form-group">
          <label>Th√¥ng tin th·∫ª</label>
          <div className="card-element-container">
            {stripe && elements ? <CardElement options={cardStyle} /> : <div>ƒêang t·∫£i...</div>}
          </div>
        </div>

        <button type="submit" disabled={!stripe || !clientSecret || loading}>
          {loading ? 'ƒêang x·ª≠ l√Ω...' : `Thanh to√°n ${new Intl.NumberFormat('vi-VN', { style: 'currency', currency }).format(amount)}`}
        </button>
      </form>

      <p>üîí Thanh to√°n ƒë∆∞·ª£c b·∫£o m·∫≠t b·ªüi Stripe. Th√¥ng tin th·∫ª ƒë∆∞·ª£c m√£ h√≥a v√† b·∫£o v·ªá.</p>
    </div>
  );
};

// Wallet Payment Form
const WalletPaymentForm = ({ amount, ticketId, onPaymentSuccess, onPaymentError }) => {
  const [loading, setLoading] = useState(false);
  const [pin, setPin] = useState('');
  const [error, setError] = useState('');
  const [requiresPin, setRequiresPin] = useState(false);
  const [paymentCompleted, setPaymentCompleted] = useState(false);

  const handleSubmit = async (event) => {
    event.preventDefault();

    // Prevent multiple submissions
    if (loading || paymentCompleted) {
      return;
    }

    setLoading(true);
    setError('');

    try {
      const token = localStorage.getItem('accessToken');

      const response = await fetch('http://localhost:8080/api/v1/payments/create-payment-intent', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          ticketId,
          amount,
          currency: 'vnd',
          paymentMethod: 'wallet',
          pin: pin
        }),
      });

      if (response.ok) {
        const data = await response.json();
        setPaymentCompleted(true);
        setError('');
        onPaymentSuccess(data.data?.transactionId || 'wallet-payment');
      } else {
        const errorData = await response.json();
        if (errorData.statusCode === 400) {
          if (errorData.message.includes('PIN')) {
            setRequiresPin(true);
            setError(errorData.message);
          } else if (errorData.message.includes('already completed')) {
            // Payment ƒë√£ ho√†n th√†nh tr∆∞·ªõc ƒë√≥
            setPaymentCompleted(true);
            setError('');
            onPaymentSuccess('already-paid');
          } else {
            setError(errorData.message || 'Thanh to√°n th·∫•t b·∫°i');
          }
        } else {
          setError(errorData.message || 'Thanh to√°n th·∫•t b·∫°i');
        }
      }
    } catch (err) {
      console.error(err);
      setError('L·ªói k·∫øt n·ªëi server');
    }

    setLoading(false);
  };

  return (
    <div className="payment-form wallet-payment">
      <h3>T·ªïng ti·ªÅn: {new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount)}</h3>

      {paymentCompleted ? (
        <div className="payment-success">
          <div className="success-icon">‚úÖ</div>
          <p className="success-message">Thanh to√°n ƒë√£ ho√†n th√†nh th√†nh c√¥ng!</p>
          <p className="success-info">Kh√¥ng c·∫ßn th·ª±c hi·ªán th√™m h√†nh ƒë·ªông n√†o.</p>
        </div>
      ) : (
        <>
          <p>üí° Thanh to√°n nhanh ch√≥ng b·∫±ng v√≠ ƒëi·ªán t·ª≠</p>
          {error && <div className="error-message">{error}</div>}

          <form onSubmit={handleSubmit}>
            {requiresPin && (
              <div className="form-group">
                <label>Nh·∫≠p m√£ PIN v√≠ ƒëi·ªán t·ª≠</label>
                <input
                  type="password"
                  placeholder="1234"
                  value={pin}
                  onChange={(e) => setPin(e.target.value.replace(/[^0-9]/g, '').slice(0, 6))}
                  maxLength={6}
                  required
                  disabled={loading}
                />
              </div>
            )}

            <button type="submit" disabled={loading || paymentCompleted}>
              {loading ? 'ƒêang x·ª≠ l√Ω...' : `üí∞ Thanh to√°n ${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount)}`}
            </button>
          </form>

          <p>‚ö° Thanh to√°n ngay l·∫≠p t·ª©c v·ªõi v√≠ ƒëi·ªán t·ª≠ c·ªßa b·∫°n</p>
        </>
      )}
    </div>
  );
};

// Main Payment Form Component
const PaymentForm = ({ amount, currency, ticketId, onPaymentSuccess, onPaymentError }) => {
  const [selectedMethod, setSelectedMethod] = useState('stripe');
  const [walletBalance, setWalletBalance] = useState(0);

  useEffect(() => {
    // L·∫•y th√¥ng tin v√≠ ƒëi·ªán t·ª≠
    const fetchWalletInfo = async () => {
      try {
        const token = localStorage.getItem('accessToken');
        const response = await fetch('http://localhost:8080/api/v1/wallet/balance', {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          const data = await response.json();
          setWalletBalance(data.data?.walletBalance || 0);

          // T·ª± ƒë·ªông ch·ªçn v√≠ n·∫øu c√≥ ƒë·ªß s·ªë d∆∞
          if (data.data?.walletBalance >= amount) {
            setSelectedMethod('wallet');
          }
        }
      } catch (error) {
        console.error('L·ªói l·∫•y th√¥ng tin v√≠:', error);
      }
    };

    fetchWalletInfo();
  }, [amount]);

  const renderPaymentForm = () => {
    switch (selectedMethod) {
      case 'wallet':
        return (
          <WalletPaymentForm
            amount={amount}
            ticketId={ticketId}
            onPaymentSuccess={onPaymentSuccess}
            onPaymentError={onPaymentError}
          />
        );
      case 'stripe':
      default:
        return (
          <Elements stripe={stripePromise}>
            <StripePaymentForm
              amount={amount}
              currency={currency}
              ticketId={ticketId}
              onPaymentSuccess={onPaymentSuccess}
              onPaymentError={onPaymentError}
            />
          </Elements>
        );
    }
  };

  return (
    <div className="payment-form-container">
      <PaymentMethodSelector
        selectedMethod={selectedMethod}
        onMethodChange={setSelectedMethod}
        walletBalance={walletBalance}
        amount={amount}
      />

      <div className="payment-form-wrapper">
        {renderPaymentForm()}
      </div>
    </div>
  );
};

export default PaymentForm;
