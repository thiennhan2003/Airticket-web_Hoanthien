import React, { useState } from 'react';

const SetPinModal = ({ user, onClose, onSuccess }) => {
  const [step, setStep] = useState(1); // 1: nh·∫≠p PIN m·ªõi, 2: x√°c nh·∫≠n, 3: nh·∫≠p PIN hi·ªán t·∫°i (n·∫øu c√≥)
  const [newPin, setNewPin] = useState('');
  const [confirmPin, setConfirmPin] = useState('');
  const [currentPin, setCurrentPin] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async () => {
    if (step === 1) {
      if (newPin.length < 4 || newPin.length > 6) {
        setError('PIN ph·∫£i c√≥ 4-6 ch·ªØ s·ªë');
        return;
      }

      if (!/^\d+$/.test(newPin)) {
        setError('PIN ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ s·ªë');
        return;
      }

      setStep(2);
      setError('');
      return;
    }

    if (step === 2) {
      if (newPin !== confirmPin) {
        setError('PIN x√°c nh·∫≠n kh√¥ng kh·ªõp');
        return;
      }

      // N·∫øu user ƒë√£ c√≥ PIN, y√™u c·∫ßu nh·∫≠p PIN hi·ªán t·∫°i
      if (user?.walletPin) {
        setStep(3);
        setError('');
        return;
      }

      // N·∫øu ch∆∞a c√≥ PIN, ti·∫øn h√†nh thi·∫øt l·∫≠p
      await submitPin();
      return;
    }

    if (step === 3) {
      await submitPin(currentPin);
      return;
    }
  };

  const submitPin = async (pinToVerify) => {
    setLoading(true);
    setError('');

    try {
      const token = localStorage.getItem('accessToken');
      const response = await fetch('http://localhost:8080/api/v1/wallet/set-pin', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          pin: newPin,
          currentPin: pinToVerify
        }),
      });

      if (response.ok) {
        onSuccess();
      } else {
        const errorData = await response.json();
        setError(errorData.message || 'Kh√¥ng th·ªÉ thi·∫øt l·∫≠p PIN');
      }
    } catch (err) {
      console.error(err);
      setError('L·ªói k·∫øt n·ªëi server');
    } finally {
      setLoading(false);
    }
  };

  const handlePinInput = (value, setter) => {
    // Ch·ªâ cho ph√©p nh·∫≠p s·ªë v√† gi·ªõi h·∫°n ƒë·ªô d√†i
    const numericValue = value.replace(/[^0-9]/g, '').slice(0, 6);
    setter(numericValue);
  };

  const renderPinInput = (value, setter, placeholder) => (
    <input
      type="password"
      placeholder={placeholder}
      value={value}
      onChange={(e) => handlePinInput(e.target.value, setter)}
      maxLength={6}
      className="pin-input"
    />
  );

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content pin-modal" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h3>üîê Thi·∫øt l·∫≠p PIN b·∫£o m·∫≠t</h3>
          <button className="close-btn" onClick={onClose}>‚úï</button>
        </div>

        <div className="modal-body">
          {step === 1 && (
            <div className="pin-setup-step">
              <div className="step-indicator">
                <span className="step active">1</span>
                <span className="step-line"></span>
                <span className="step">2</span>
                {user?.walletPin && <span className="step">3</span>}
              </div>

              <div className="pin-input-section">
                <label>Nh·∫≠p m√£ PIN m·ªõi (4-6 ch·ªØ s·ªë)</label>
                {renderPinInput(newPin, setNewPin, '123456')}

                <div className="pin-requirements">
                  <p>üìã Y√™u c·∫ßu:</p>
                  <ul>
                    <li>4-6 ch·ªØ s·ªë</li>
                    <li>D·ªÖ nh·ªõ nh∆∞ng kh√≥ ƒëo√°n</li>
                    <li>Kh√¥ng d√πng ng√†y sinh, s·ªë ƒëi·ªán tho·∫°i</li>
                  </ul>
                </div>
              </div>
            </div>
          )}

          {step === 2 && (
            <div className="pin-setup-step">
              <div className="step-indicator">
                <span className="step completed">1</span>
                <span className="step-line"></span>
                <span className="step active">2</span>
                {user?.walletPin && <span className="step">3</span>}
              </div>

              <div className="pin-input-section">
                <label>X√°c nh·∫≠n m√£ PIN</label>
                {renderPinInput(confirmPin, setConfirmPin, '123456')}

                {newPin && confirmPin && (
                  <div className={`pin-match ${newPin === confirmPin ? 'match' : 'no-match'}`}>
                    {newPin === confirmPin ? '‚úÖ PIN kh·ªõp' : '‚ùå PIN kh√¥ng kh·ªõp'}
                  </div>
                )}
              </div>
            </div>
          )}

          {step === 3 && (
            <div className="pin-setup-step">
              <div className="step-indicator">
                <span className="step completed">1</span>
                <span className="step-line"></span>
                <span className="step completed">2</span>
                <span className="step-line"></span>
                <span className="step active">3</span>
              </div>

              <div className="pin-input-section">
                <label>Nh·∫≠p PIN hi·ªán t·∫°i ƒë·ªÉ x√°c nh·∫≠n</label>
                {renderPinInput(currentPin, setCurrentPin, 'PIN hi·ªán t·∫°i')}

                <div className="pin-warning">
                  <p>‚ö†Ô∏è B·∫°n ƒëang thay ƒë·ªïi PIN b·∫£o m·∫≠t.</p>
                  <p>Vui l√≤ng nh·∫≠p PIN hi·ªán t·∫°i ƒë·ªÉ x√°c nh·∫≠n.</p>
                </div>
              </div>
            </div>
          )}

          {error && <div className="error-message">{error}</div>}

          <div className="modal-actions">
            <button onClick={onClose} className="btn-secondary">
              H·ªßy
            </button>
            <button
              onClick={handleSubmit}
              className="btn-primary"
              disabled={loading}
            >
              {loading ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c nh·∫≠n'}
            </button>
          </div>

          <div className="security-info">
            <p>üîí PIN c·ªßa b·∫°n ƒë∆∞·ª£c m√£ h√≥a v√† b·∫£o m·∫≠t tuy·ªát ƒë·ªëi.</p>
            <p>Kh√¥ng chia s·∫ª PIN v·ªõi b·∫•t k·ª≥ ai, k·ªÉ c·∫£ nh√¢n vi√™n h·ªó tr·ª£.</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SetPinModal;
