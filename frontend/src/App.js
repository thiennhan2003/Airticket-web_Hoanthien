import React, { useState, useEffect } from "react";
import { BrowserRouter as Router, Routes, Route, Link, useNavigate } from "react-router-dom";
import BannerSlider from "./BannerSlider";
import Login from "./pages/login";
import Register from "./pages/Register";
import Profile from "./pages/Profile";
import Booking from "./pages/Booking";
import Success from "./pages/Success";
import Payment from "./pages/Payment";
import TicketDetail from "./pages/TicketDetail";
import Verification from "./pages/Verification";
import "./pages/TicketDetail.css";

// Home component
function Home({ user, setUser }) {
  const navigate = useNavigate();
  const [flights, setFlights] = useState([]);
  const [showUserMenu, setShowUserMenu] = useState(false);

  // H√†m clear k·∫øt qu·∫£ t√¨m ki·∫øm
  const handleClearResults = () => {
    setFlights([]);
  };
  const handleSearch = async (e) => {
    e.preventDefault();

    // L·∫•y d·ªØ li·ªáu t·ª´ form
    const formData = new FormData(e.target);
    const from = formData.get('from')?.trim().toLowerCase();
    const to = formData.get('to')?.trim().toLowerCase();

    if (!from || !to) {
      alert('Vui l√≤ng nh·∫≠p n∆°i ƒëi v√† n∆°i ƒë·∫øn!');
      return;
    }

    try {
      // T·∫°o query string cho t√¨m ki·∫øm
      const queryParams = new URLSearchParams({
        route: `${from} - ${to}`,
        limit: '50' // L·∫•y nhi·ªÅu k·∫øt qu·∫£ ƒë·ªÉ t√¨m ki·∫øm
      });

      const response = await fetch(`http://localhost:8080/api/v1/flights?${queryParams}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      // L·ªçc v√† s·∫Øp x·∫øp k·∫øt qu·∫£ ph√π h·ª£p nh·∫•t
      let searchResults = data.data?.flights || [];

      if (searchResults.length === 0) {
        // Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£, th·ª≠ t√¨m ki·∫øm g·∫ßn ƒë√∫ng
        const fuzzyQueryParams = new URLSearchParams({
          route: `${from}|${to}`,
          limit: '20'
        });

        const fuzzyResponse = await fetch(`http://localhost:8080/api/v1/flights?${fuzzyQueryParams}`);
        const fuzzyData = await fuzzyResponse.json();
        searchResults = fuzzyData.data?.flights || [];

        if (searchResults.length === 0) {
          setFlights([]);
          return;
        }
      }

      setFlights(searchResults);
    } catch (error) {
      console.error('L·ªói khi t√¨m ki·∫øm chuy·∫øn bay:', error);
      alert('Kh√¥ng th·ªÉ t√¨m ki·∫øm chuy·∫øn bay. Vui l√≤ng th·ª≠ l·∫°i sau!');
      setFlights([]);
    }
  };

  // ƒê√≥ng dropdown khi click b√™n ngo√†i
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (showUserMenu && !event.target.closest('.user-menu')) {
        setShowUserMenu(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showUserMenu]);

  // H√†m x·ª≠ l√Ω ƒë·∫∑t v√©
  const handleBooking = (flight) => {
    if (!user) {
      alert('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t v√©!');
      return;
    }

    // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ƒë·∫∑t v√© v·ªõi flightId
    window.location.href = `/booking/${flight._id}`;
  };

  // H√†m x·ª≠ l√Ω ƒëƒÉng xu·∫•t
  const handleLogout = () => {
    localStorage.removeItem("accessToken");
    setUser(null);
  };

  return (
    <div className="app">
      {/* Header */}
      <header className="header">
        <div className="header-left">
          <h2 className="logo">‚úàÔ∏è FlightBooking</h2>
        </div>
        <div className="nav">
          <button className="nav-btn">Flights</button>
          <button className="nav-btn">Hotels</button>
          {user ? (
            <div className="user-menu">
              <div
                className="user-info"
                onClick={() => setShowUserMenu(!showUserMenu)}
              >
                <div className="user-avatar">
                  {user.fullName.charAt(0).toUpperCase()}
                </div>
                <div className="user-details">
                  <span className="username">{user.fullName}</span>
                  <span className="user-email">{user.email}</span>
                </div>
                <span className="dropdown-arrow">‚ñº</span>
              </div>
              
              {showUserMenu && (
                <div className={`dropdown-menu ${showUserMenu ? 'show' : ''}`}>
                  <button onClick={() => {
                    navigate('/profile');
                    setShowUserMenu(false);
                  }}>
                    <span className="icon">üë§</span>
                    H·ªì s∆° c√° nh√¢n
                  </button>
                  <button onClick={() => {
                    handleLogout();
                    setShowUserMenu(false);
                  }}>
                    <span className="icon">üö™</span>
                    ƒêƒÉng xu·∫•t
                  </button>
                </div>
              )}
            </div>
          ) : (
            <Link to="/login">
              <button className="login-btn">ƒêƒÉng nh·∫≠p</button>
            </Link>
          )}
        </div>
      </header>

      {/* Banner */}
      <BannerSlider />

      {/* Search Box */}
      <section className="search-box">
        <h3>üîç T√¨m chuy·∫øn bay</h3>
        <form className="search-form" onSubmit={handleSearch}>
          <input name="from" type="text" placeholder="N∆°i ƒëi" required />
          <input name="to" type="text" placeholder="N∆°i ƒë·∫øn" required />
          <input type="date" required min={new Date().toISOString().split('T')[0]} />
          <input type="number" name="passengers" placeholder="H√†nh kh√°ch" min="1" defaultValue="1" />
          <select name="class">
            <option value="economy">Economy</option>
            <option value="business">Business</option>
            <option value="first">First Class</option>
          </select>
          <button type="submit" className="btn-search">T√¨m chuy·∫øn bay</button>
        </form>
      </section>

      {/* Flight Results */}
      <section className="results">
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
          <h3>K·∫øt qu·∫£ t√¨m ki·∫øm</h3>
          {flights.length > 0 && (
            <button
              onClick={handleClearResults}
              style={{
                padding: '8px 16px',
                backgroundColor: '#f44336',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              T√¨m ki·∫øm m·ªõi
            </button>
          )}
        </div>
        {flights.length > 0 ? (
          flights.map((flight) => {
            // Ki·ªÉm tra xem chuy·∫øn bay ƒë√£ kh·ªüi h√†nh ch∆∞a (th·ªùi gian ƒë·∫ßy ƒë·ªß)
            const departureTime = new Date(flight.departureTime);
            const now = new Date();
            const isPastFlight = departureTime < now;

            return (
              <div key={flight._id} className={`flight-card ${isPastFlight ? 'past-flight' : ''}`}>
                <div>
                  <strong>{flight.flightCode}</strong>
                  {isPastFlight && <span className="past-flight-badge">ƒê√É KH·ªûI H√ÄNH</span>}
                  <p>Tuy·∫øn bay: {flight.route}</p>
                  <p>Kh·ªüi h√†nh: {new Date(flight.departureTime).toLocaleString('vi-VN')}</p>
                  <p>ƒê·∫øn n∆°i: {new Date(flight.arrivalTime).toLocaleString('vi-VN')}</p>
                  <p>S·ªë gh·∫ø c√≤n: {flight.availableSeats}/{flight.totalSeats}</p>
                  <div className="flight-prices">
                    <p className="price-label">Gi√° v√©:</p>
                    <div className="price-options">
                      {flight.economyPrice && (
                        <span className="price-option">
                          <span className="price-class">Economy:</span>
                          <span className="price-value">
                            {new Intl.NumberFormat('vi-VN', {
                              style: 'currency',
                              currency: 'VND'
                            }).format(flight.economyPrice)}
                          </span>
                        </span>
                      )}
                      {flight.businessPrice && (
                        <span className="price-option">
                          <span className="price-class">Business:</span>
                          <span className="price-value">
                            {new Intl.NumberFormat('vi-VN', {
                              style: 'currency',
                              currency: 'VND'
                            }).format(flight.businessPrice)}
                          </span>
                        </span>
                      )}
                      {flight.firstClassPrice && (
                        <span className="price-option">
                          <span className="price-class">First Class:</span>
                          <span className="price-value">
                            {new Intl.NumberFormat('vi-VN', {
                              style: 'currency',
                              currency: 'VND'
                            }).format(flight.firstClassPrice)}
                          </span>
                        </span>
                      )}
                      {!flight.economyPrice && !flight.businessPrice && !flight.firstClassPrice && (
                        <span className="price-unavailable">Gi√° ch∆∞a c·∫≠p nh·∫≠t</span>
                      )}
                    </div>
                  </div>
                </div>
                <button
                  className={`btn-book ${isPastFlight ? 'disabled' : ''}`}
                  onClick={() => handleBooking(flight)}
                  disabled={!user || isPastFlight}
                >
                  {isPastFlight ? 'ƒê√£ kh·ªüi h√†nh' : (user ? 'ƒê·∫∑t v√©' : 'ƒêƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t v√©')}
                </button>
              </div>
            );
          })
        ) : (
          <div style={{ textAlign: 'center', padding: '40px' }}>
            <p style={{ fontSize: '18px', marginBottom: '20px' }}>
              {flights.length === 0 && 'Nh·∫≠p th√¥ng tin ƒë·ªÉ t√¨m chuy·∫øn bay...'}
            </p>
            <p style={{ color: '#666' }}>
              üí° M·∫πo: Nh·∫≠p t√™n th√†nh ph·ªë nh∆∞ "H√† N·ªôi", "TP.HCM", "ƒê√† N·∫µng"...
            </p>
          </div>
        )}
      </section>

      {/* Promo Section */}
      <section className="promo-section">
        <h3>‚úàÔ∏è D·ªãch v·ª• n·ªïi b·∫≠t</h3>
        <div className="promo-grid">
          <div className="promo-card">
             <p>∆Øu ƒë√£i v√© m√°y bay gi√° r·∫ª</p>
          </div>
          <div className="promo-card">
            <p>Kh√°ch s·∫°n ti·ªán nghi</p>
          </div>
          <div className="promo-card">
            <p>B·∫£o hi·ªÉm du l·ªãch an to√†n</p>
          </div>
          <div className="promo-card">
            <p>Thu√™ xe du l·ªãch</p>
          </div>
        </div>
      </section>

      {/* Promo Flights Section */}
<section className="promo-flights">
  <h3>‚úàÔ∏è ∆Øu ƒë√£i v√© m√°y bay d√†nh cho b·∫°n!</h3>

  {/* Promo Banners */}
  <div className="promo-banners">
    <div className="banner-card">
      <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRj6m2XYpqNmSmMYvG2YK4jtEr_c2tSMCGm0w&s" alt="Promo 1" />
      <p>10.10 Travel Sale - Gi·∫£m ƒë·∫øn 30%</p>
    </div>
    <div className="banner-card">
      <img src="https://ik.imagekit.io/tvlk/image/imageResource/2025/09/11/1757555758021-be0e2d169a3d27772f10080585eaeaca.jpeg?tr=q-75" alt="Promo 2" />
      <p>Qu√† t·∫∑ng 10.000 voucher h·∫•p d·∫´n</p>
    </div>
  </div>

  {/* New User Promo Codes */}
  <div className="promo-codes">
    <h4>M√£ ∆∞u ƒë√£i t·∫∑ng b·∫°n m·ªõi</h4>
    <div className="codes-grid">
      <div className="code-card">
        <p>Gi·∫£m ngay 50K</p>
        <button onClick={() => navigator.clipboard.writeText("TVLKBANMOI")}>Copy</button>
      </div>
      <div className="code-card">
        <p>8% gi·∫£m gi√° kh√°ch s·∫°n</p>
        <button onClick={() => navigator.clipboard.writeText("TVLKBANMOI")}>Copy</button>
      </div>
      <div className="code-card">
        <p>8% gi·∫£m ho·∫°t ƒë·ªông du l·ªãch</p>
        <button onClick={() => navigator.clipboard.writeText("TVLKBANMOI")}>Copy</button>
      </div>
    </div>
  </div>

  {/* Flight Deals */}
<div className="flight-deals">
  <h4>V√© m√°y bay n·ªôi ƒë·ªãa gi√° t·ªët nh·∫•t</h4>

  {/* Tabs ch·ªçn th√†nh ph·ªë */}
  <div className="deals-tabs">
    {["H√† N·ªôi", "TP. H·ªì Ch√≠ Minh", "ƒê√† N·∫µng", "Hu·∫ø", "Ph√∫ Qu·ªëc", "Nha Trang"].map((city) => (
      <button key={city}>{city}</button>
    ))}
  </div>

  {/* Cards */}
  <div className="deals-cards">
    {[
      {
        from: "TP HCM",
        to: "H√† N·ªôi",
        price: "702.308 VND",
        date: "2 thg 3 2026",
        img: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS4b2NNaDSaCuzN5iKgi0WA_PU6PVYIU_7epw&s"
      },
      {
        from: "ƒê√† N·∫µng",
        to: "H√† N·ªôi",
        price: "680.600 VND",
        date: "30 thg 9 2025",
        img: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRkrTe76itRaRGDa3CpFjG3gJMY_Fi2yWydCg&s"
      },
      {
        from: "Hu·∫ø",
        to: "H√† N·ªôi",
        price: "680.600 VND",
        date: "2 thg 10 2025",
        img: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTvsE2rmsNhgXZRT-U-OucddnukxMVa3RTb5w&s"
      },
    ].map((f, idx) => (
      <div key={idx} className="deal-card">
        <span className="label">M·ªòT CHI·ªÄU</span>
        <img src={f.img} alt={`Flight ${idx + 1}`} />
        <p>{f.from} - {f.to}</p>
        <p>{f.date}</p>
        <p className="price">{f.price}</p>
      </div>
    ))}
  </div>

  {/* Button Xem th√™m */}
  <button className="btn-view-more">Xem th√™m ∆∞u ƒë√£i bay</button>
  </div>

</section>
      <footer className="footer">
        <div className="footer-container">
          <div className="footer-section">
            <h4>V·ªÅ ch√∫ng t√¥i</h4>
            <ul>
              <li><a href="/about">Gi·ªõi thi·ªáu</a></li>
              <li><a href="/contact">Li√™n h·ªá</a></li>
              <li><a href="/careers">Tuy·ªÉn d·ª•ng</a></li>
            </ul>
          </div>
          <div className="footer-section">
            <h4>H·ªó tr·ª£</h4>
            <ul>
              <li><a href="/FAQ">FAQ</a></li>
              <li><a href="/chinhsach">Ch√≠nh s√°ch b·∫£o m·∫≠t</a></li>
              <li><a href="/dieukhoan">ƒêi·ªÅu kho·∫£n & ƒëi·ªÅu ki·ªán</a></li>
            </ul>
          </div>
          <div className="footer-section">
            <h4>K·∫øt n·ªëi v·ªõi ch√∫ng t√¥i</h4>
            <div className="social-icons">
              <a href="https://www.facebook.com"><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRIp8fhKe_0pUg2VB0rJemNKkZl_1UOHc-Oaw&s" alt="Facebook" /></a>
              <a href="https://www.instagram.com"><img src="https://cdn.pixabay.com/photo/2016/12/04/18/58/instagram-1882330_1280.png" alt="instagram"></img></a>
              <a href="https://x.com"><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRIkPCqdgzFkqjlpmxBsh_-xzVE7Rm6DqRnhQ&s" alt="Twitter" /></a>
            </div>
          </div>
        </div>
        <p className="footer-copy">¬© 2025 Online Flight Booking. All rights reserved.</p>
      </footer>
    </div>
  );
}

// App component
function App() {
  const [user, setUser] = useState(null);

  // H√†m ki·ªÉm tra v√† refresh token th√¥ng minh
  const checkAndRefreshToken = async () => {
    const token = localStorage.getItem("accessToken");
    if (!token) return;

    try {
      const res = await fetch("http://localhost:8080/api/v1/auth/get-profile", {
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json"
        },
      });

      if (res.status === 401) {
        // Token h·∫øt h·∫°n, th·ª≠ refresh token
        const refreshToken = localStorage.getItem("refreshToken");
        if (refreshToken) {
          try {
            const refreshRes = await fetch("http://localhost:8080/api/v1/auth/refresh", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ refreshToken })
            });

            if (refreshRes.ok) {
              const refreshData = await refreshRes.json();
              localStorage.setItem("accessToken", refreshData.data.accessToken);
              if (refreshData.data.refreshToken) {
                localStorage.setItem("refreshToken", refreshData.data.refreshToken);
              }

              // Th·ª≠ l·∫•y profile l·∫°i v·ªõi token m·ªõi
              const newRes = await fetch("http://localhost:8080/api/v1/auth/get-profile", {
                headers: {
                  "Authorization": `Bearer ${refreshData.data.accessToken}`,
                  "Content-Type": "application/json"
                },
              });

              if (newRes.ok) {
                const newData = await newRes.json();
                if (newData.data) {
                  setUser(newData.data);
                }
              }
              return;
            }
          } catch (refreshError) {
            console.error("L·ªói refresh token:", refreshError);
          }
        }

        // Kh√¥ng th·ªÉ refresh token, ƒëƒÉng xu·∫•t
        localStorage.removeItem("accessToken");
        localStorage.removeItem("refreshToken");
        setUser(null);
      } else if (res.ok) {
        const data = await res.json();
        if (data.data) {
          setUser(data.data);
        }
      }
    } catch (err) {
      console.error("L·ªói khi ki·ªÉm tra token:", err);
      // Kh√¥ng x√≥a token ngay, ch·ªâ log l·ªói ƒë·ªÉ tr√°nh ƒëƒÉng xu·∫•t kh√¥ng mong mu·ªën
      // localStorage.removeItem("accessToken");
      // localStorage.removeItem("refreshToken");
      // setUser(null);
    }
  };

  // L·∫•y profile khi load app
  useEffect(() => {
    checkAndRefreshToken();
  }, []);

  return (
    <Router>
      <Routes>
        <Route path="/" element={<Home user={user} setUser={setUser} />} />
        <Route path="/login" element={<Login setUser={setUser} />} />
        <Route path="/register" element={<Register />} />
        <Route path="/profile" element={<Profile user={user} setUser={setUser} />} />
        <Route path="/booking/:flightId" element={<Booking user={user} />} />
        <Route path="/success" element={<Success />} />
        <Route path="/payment/:ticketId" element={<Payment user={user} />} />
        {/* <Route path="/payment/" element={<Payment user={user} />} /> */}
        <Route path="/verification" element={<Verification setUser={setUser} />} />
        <Route path="/ticket/:ticketId" element={<TicketDetail user={user} setUser={setUser} />} />
        
      </Routes>
    </Router>
  );
}

export default App;
